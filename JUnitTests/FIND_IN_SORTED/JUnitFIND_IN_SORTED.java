
import org.junit.Test;
import static org.junit.Assert.assertTrue;


public class JUnitFIND_IN_SORTED {
	@Test
	public void test() {
		int key = 1549556828;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {168451164, 168451164, 173825116, 173825116, 173825116, 173825116, 1544161884, 1544161884, 1544182876, 1544182876, 1544182876, 1549535754, 1549535836, 1549535836, 1549535836, 1549556746, 1549556746, 1549556746, 1549556746, 1549556746, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}

	@Test
	public void test1() {
		int key = 243204096;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {-2146369536, -1871049217, -1871049217, -380305408, -380305408, -301989888, -218103808, -16777216, -16777216, -2162688, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 7, 127, 255, 256, 57856, 59904, 60416, 65535, 65535, 65536, 65536, 65536, 131072, 983040, 1048576, 1048576, 1048576, 14614528, 16769280, 16777215, 134217728, 268435456, 536870912, 570425344, 1073741824};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}

	@Test
	public void test2() {
		int key = 1701143909;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {168438329, 168438329, 168438571, 170338087, 170469673, 170469673, 170601259, 170601259, 170930224, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555843198, 555843198, 556016676, 556016676, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 587860522, 587860522, 587882078, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505376, 590623796, 590623796, 606341642, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348382, 606348382, 607335219, 607335219, 622928161, 622928161, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191347, 623191349, 623191349, 623191349, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 641148197, 656548386, 656877351, 656877351, 656877351, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720617, 673720617, 673851946, 673851946, 690555402, 690555402, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563370, 690563370, 691023920, 691023920, 705301002, 707405864, 707405864, 707406372, 707406372, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406390, 707406390, 707413060, 707415373, 707415373, 723920422, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 728328553, 728328553, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791625535, 791625535, 808069674, 808462376, 808462376, 808464432, 808464432, 808464432, 808464432, 808464432, 808464432, 839526954, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 858990889, 858990889, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993716, 858993716, 874717987, 875836426, 875836426, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836469, 875836469, 891495203, 892679460, 892679460, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 909518117, 909518117, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 925247014, 925247014, 976894474, 976894474, 976894522, 976894522, 1061109514, 1061109514, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1128466954, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1145316645, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1225394721, 1225394721, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1248488042, 1248488042, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296922744, 1296922744, 1364283658, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1414812756, 1414812756, 1414812788, 1414812788, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1433740067, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027801, 1499027802, 1499027802, 1515866698, 1515866698, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1580541221, 1580541221, 1583221315, 1583227683, 1583227683, 1583242788, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1616928864, 1616936574, 1697854259, 1697854259, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1768507464, 1768507464, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1782200890, 1782200890, 1785358954, 1785358954, 1785358954, 1785358954, 1953789044, 1953789044, 1953789044, 1953789044, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2122219041, 2122219041, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}

	@Test
	public void test3() {
		int key = 1694498816;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {-2144720342, -11447983, -10132123, 36, 25663, 2171169, 2171940, 16777216, 22961758, 168436001, 168438329, 168439856, 170338087, 170601259, 170601259, 173101393, 275080549, 389231401, 456340275, 555819266, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819353, 555824437, 555843198, 556016676, 561938046, 571875874, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 572662306, 572662357, 575491405, 587860522, 587860522, 589498890, 589498915, 589505290, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505328, 589505376, 589509170, 589520992, 591143715, 604779315, 606282531, 606348289, 606348323, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348324, 606348339, 606348358, 606348382, 606350884, 606351140, 606352419, 606355748, 607335219, 622928161, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191333, 623191349, 623191590, 623214373, 624112435, 624244003, 624244021, 624371238, 625157413, 625230885, 637478181, 638205994, 640034341, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034359, 640755238, 656548386, 656877351, 656877351, 656877351, 656877351, 656877351, 656877351, 656877351, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720361, 673720617, 673851946, 673851946, 690555402, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563369, 690563370, 690563404, 705301002, 707405864, 707406345, 707406346, 707406372, 707406376, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406378, 707406382, 707406390, 707406404, 707408691, 707409462, 707415373, 707415373, 710827614, 724249382, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724265321, 728328553, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791625535, 791625535, 807938088, 808462376, 808462890, 808464432, 808464432, 808464432, 808464432, 808464432, 808464432, 842150410, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 858987786, 858990889, 858993408, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993716, 858993716, 875823108, 875825674, 875836452, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836468, 875836469, 875836469, 892284719, 892675108, 892679460, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892679477, 892691509, 908404005, 909518117, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 909522486, 925247014, 959064618, 976882186, 976894474, 976894522, 976894522, 976894522, 1061109504, 1061109514, 1061109514, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1077097267, 1128219459, 1128466954, 1128474664, 1128474947, 1128479555, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128482627, 1128497219, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1145324612, 1177168426, 1210393893, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1212696648, 1225394721, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1229539657, 1246382666, 1246382666, 1246382666, 1246382666, 1248488042, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296911693, 1296922744, 1298222413, 1299740792, 1361323044, 1363169617, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1364283729, 1414812756, 1414812756, 1414812788, 1414820980, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1431655765, 1433740067, 1498040906, 1499027801, 1499027801, 1499027801, 1499027801, 1499028058, 1514818122, 1515870804, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1515870810, 1564689219, 1579426852, 1580541221, 1583221315, 1583227683, 1583232293, 1583242787, 1583242805, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1616928864, 1616928864, 1616936574, 1618902654, 1697854259, 1697854259, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1701143909, 1768507464, 1768515912, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1768515945, 1782200858, 1785358954, 1785358954, 1785358954, 1785358954, 1785358954, 1953789001, 1953789044, 1953789044, 1964712739, 2021161050, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2021161080, 2122195233, 2122219041, 2122219102, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2133140773};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}


	@Test
	public void test4() {
		int key = 1702192995;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {158232675, 173764956, 173764956, 173895023, 539313753, 539452716, 539850346, 541215557, 541217107, 541283899, 541344087, 542460234, 542523716, 542863453, 542863453, 542916931, 543320167, 543320687, 543387948, 543389291, 543520624, 543845221, 543898487, 543910510, 543975799, 544043365, 544110193, 544241521, 544291702, 544304428, 544435819, 544435819, 544616569, 544629548, 544629617, 544632172, 544632178, 544632431, 544632433, 544633147, 544634218, 544635257, 544685360, 544760941, 657203309, 658140772, 659574603, 660427350, 673797464, 707294263, 707406378, 707409976, 740324957, 745349227, 745495404, 758736232, 762405682, 772356903, 808661352, 809003314, 812873320, 812873320, 813265271, 826885701, 828924793, 842019689, 842085152, 842221624, 844505155, 845838190, 859072121, 862154587, 862287729, 862484323, 862546736, 875912784, 879126578, 913863222, 926051939, 930182968, 930441319, 941651560, 942682930, 943141736, 943159138, 943286377, 946151542, 946430830, 946432101, 946432101, 946955116, 959657062, 963278368, 964257840, 992414301, 996353836, 996765558, 997025387, 997272608, 997548576, 997616434, 997682208, 1026564214, 1094996775, 1109410636, 1111970373, 1112754976, 1129592626, 1131640688, 1161385798, 1163084601, 1163284822, 1163343944, 1163614024, 1177367101, 1179276913, 1210076758, 1212823621, 1213088582, 1213093408, 1229344288, 1230453024, 1247167323, 1262166114, 1263095072, 1263420246, 1279993210, 1280137041, 1296903276, 1312956483, 1313360440, 1314278203, 1330210935, 1330266953, 1330730835, 1364405792, 1364676411, 1364678176, 1394623351, 1430344534, 1431262496, 1445863434, 1446525273, 1447253829, 1447709728, 1447906372, 1447907663, 1447971147, 1448236886, 1448433459, 1448686408, 1460219977, 1462715734, 1463961686, 1464553035, 1465262155, 1480939355, 1529684087, 1530033757, 1533832813, 1564042602, 1566267458, 1632917848, 1646279529, 1646294377, 1650813039, 1651386144, 1651386144, 1663049846, 1663071851, 1663858533, 1664628793, 1668024675, 1668161649, 1668180332, 1668181099, 1668297264, 1668379493, 1668639082, 1668900443, 1679828844, 1679828844, 1697390710, 1698242605, 1700948342, 1701012853, 1701082410, 1701083991, 1701083991, 1701342833, 1701408360, 1701459046, 1702196792, 1702258793, 1717242222, 1718315628, 1718578275, 1734555509, 1734768185, 1747809824, 1748006445, 1748121655, 1748508790, 1748594533, 1751480182, 1751606072, 1751739246, 1751740448, 1752052579, 1752064800, 1752135267, 1752248888, 1752655219, 1752655219, 1764896819, 1765303665, 1768235114, 1768235117, 1768235117, 1768581920, 1768647968, 1768716078, 1768974446, 1769289785, 1769370979, 1769370984, 1784968046, 1785033248, 1785427565, 1785491063, 1785619810, 1785674613, 1785936757, 1786067248, 1786077800, 1786082848, 1786083632, 1786146080, 1786146927, 1797289837, 1798338150, 1798465592, 1801810807, 1801811513, 1801873782, 1802072182, 1802117238, 1802265960, 1802331237, 1802379363, 1802925932, 1812618034, 1814048265, 1814065015, 1814066735, 1814834285, 1815244653, 1815831328, 1818977642, 1819242611, 1830841388, 1830844261, 1835819386, 1835819386, 1835821669, 1836021536, 1836202346, 1836458085, 1836458085, 1847616105, 1851284545, 1851943541, 1852143465, 1852143465, 1852317814, 1852322678, 1852323941, 1852400994, 1852664676, 1852664676, 1852779833, 1852795951, 1852907638, 1852926320, 1853235310, 1853235310, 1853318518, 1853518699, 1868261995, 1868916781, 1868917363, 1869182496, 1869374326, 1869422710, 1870034232, 1870095673, 1870098541, 1881172598, 1883592310, 1885566496, 1886023030, 1886220576, 1886283827, 1896430435, 1897937773, 1898717283, 1899722341, 1902326374, 1902452846, 1903130221, 1903650926, 1914724965, 1932291104, 1932291104, 1933009766, 1935764512, 1936026634, 1936613920, 1937206882, 1937207341, 1949856611, 1953642103, 1966622752, 1966631522, 1969433711, 1969762360, 1969842277, 1969844580, 1969910127, 1970694259, 1970694259, 1981823353, 1981834094, 1981834094, 1981836138, 1981837157, 1982686069, 1982818916, 1985366603, 1985701225, 1985829677, 1985831792, 1986207783, 1986207854, 1986228087, 1986358322, 1986409066, 1986622776, 1986623082, 1986623082, 1986684985, 1986739057, 1986752104, 1986819675, 1986882592, 1986883849, 1987080049, 1987080049, 1987145834, 1987518570, 1998616172, 1999533667, 2000189032, 2000250995, 2002940769, 2003003755, 2003135334, 2003136569, 2003138167, 2003659835, 2003705963, 2004230253, 2004230253, 2004236343, 2020500027, 2020500027, 2036889655, 2037725289, 2037987433};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}


	@Test
	public void test5() {
		int key = 1702192995;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {-656877352, -656877352, -34962, -139, 64091, 1048576, 33568883, 100663045, 154159430, 157510767, 173495840, 359621992, 537548630, 538995822, 538998381, 539452716, 539850346, 539887931, 540160307, 540756838, 541148243, 541282643, 541292400, 541477482, 541608504, 541803867, 541870885, 542207310, 542518816, 542526796, 543242083, 543320427, 543321639, 543321639, 543322472, 543387233, 543387244, 543387948, 543389291, 544042081, 544171370, 544228694, 544291702, 544565608, 544616569, 544629617, 544632178, 544633147, 544635257, 544685326, 544695680, 621552933, 623191333, 623191333, 654990701, 660429656, 660941856, 662074730, 675828055, 707406378, 707406378, 707406392, 741109024, 741109024, 743527214, 746022262, 762344809, 762716259, 768425265, 773871181, 779510560, 793595180, 795501683, 795501711, 807938385, 842019633, 842039345, 844581710, 846606457, 858936864, 859072121, 862484323, 862546736, 912348249, 926115959, 926316658, 930441287, 930441319, 930570867, 930570867, 942892407, 943225192, 944250958, 944326192, 944330553, 946020460, 946168949, 946172279, 946430830, 947218801, 947284336, 947480696, 958420557, 959457321, 959918702, 959979638, 961959255, 963146606, 963278368, 964257840, 992414301, 994399043, 995569477, 997272608, 997288561, 997617775, 997617775, 997682208, 1096174929, 1112953431, 1127831125, 1128681297, 1129717845, 1129729612, 1131637097, 1145785923, 1146635607, 1159742033, 1163284040, 1163286835, 1163346532, 1178817591, 1179603287, 1213088288, 1213610041, 1213612887, 1227048264, 1229666903, 1244081184, 1245202775, 1246844751, 1260405323, 1260407883, 1262835512, 1262836567, 1263487336, 1277182806, 1279544142, 1293964846, 1297568083, 1314267212, 1329284435, 1330138691, 1347373685, 1364150350, 1364416078, 1398165065, 1398360397, 1399748128, 1431841320, 1444955201, 1444959561, 1446729519, 1447174211, 1447184210, 1447770912, 1447970890, 1448171350, 1448431445, 1449686885, 1461738352, 1461738352, 1462973014, 1464358467, 1464934466, 1465076553, 1479157876, 1480741707, 1496462152, 1498759507, 1498948947, 1527344752, 1527344752, 1530033757, 1533700982, 1533700982, 1533900320, 1551332896, 1551332896, 1560959857, 1560959857, 1564042602, 1634476150, 1634476150, 1651009382, 1651078773, 1651078773, 1651142459, 1651144054, 1662662713, 1663069289, 1663071851, 1663071851, 1663511584, 1663856475, 1664577911, 1664628793, 1667846253, 1668050736, 1668249200, 1668297264, 1668685931, 1668685931, 1684237321, 1685614178, 1685614178, 1696623209, 1697674102, 1697674102, 1701342833, 1701475128, 1701579355, 1701803637, 1701978210, 1702192995, 1702259062, 1702259062, 1702262560, 1702326309, 1702327864, 1702915616, 1714320995, 1718104632, 1718907446, 1718907446, 1734829927, 1734829927, 1735878000, 1746957166, 1746957166, 1747809641, 1747990633, 1747990633, 1748121655, 1748594533, 1751349606, 1751606936, 1751739242, 1751739246, 1752067948, 1752068095, 1752131958, 1752131958, 1753905510, 1768252023, 1768515927, 1768515945, 1768956010, 1768956010, 1769289785, 1769305704, 1769305704, 1769432437, 1770876192, 1780512366, 1780512366, 1782081896, 1782100584, 1784833379, 1785405559, 1785405559, 1785423219, 1785558560, 1786126399, 1797262691, 1798465592, 1801808436, 1802136686, 1802137189, 1802137189, 1802397047, 1802413687, 1814046022, 1814048265, 1814067300, 1814067300, 1818584187, 1818584187, 1818912114, 1819176298, 1819178853, 1819695973, 1835278375, 1835278375, 1835296107, 1835428714, 1835756645, 1835756645, 1835809635, 1835809635, 1835953515, 1835953515, 1836021754, 1836124475, 1836124475, 1836130363, 1836148000, 1836148000, 1845493871, 1848861551, 1849172086, 1851924539, 1852322678, 1852323841, 1852402807, 1852779833, 1853041772, 1853041772, 1853261438, 1869422710, 1870029679, 1870078070, 1870095673, 1877476204, 1886612085, 1902404460, 1902669686, 1902735464, 1902735464, 1902802274, 1903065715, 1903132525, 1903650926, 1903650926, 1916166514, 1933276514, 1935882097, 1936026634, 1936286752, 1936287008, 1936356665, 1936619040, 1949775480, 1965056616, 1965697578, 1966630759, 1970675823, 1982686069, 1983407460, 1985829677, 1986210935, 1986358312, 1986405226, 1986554224, 1986556210, 1986863212, 1986863212, 1986875705, 1987080041, 1987538030, 1998651391, 2000187747, 2000187747, 2000188777, 2003135334, 2003137910, 2003138152, 2003138152, 2003705963, 2003722858, 2003856753, 2004039523, 2016900152, 2036871286, 2036889445, 2049400146, 2050241886, 2051364433, 2135695427};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}


	@Test
	public void test6() {
		int key = 1600085855;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}



	@Test
	public void test7() {
		int key = -75563008;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {-369098752, -167707904, -16777216, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 15, 19, 32, 100, 128, 255, 255, 255, 256, 2560, 4096, 20046, 25600, 44032, 65535, 131072, 327680, 983040, 1048576, 1310720, 2162688, 8323072, 8388352, 13500543, 14745599, 16252672, 16383744, 16514816, 123076608, 123076608, 134217728, 150994944, 335544320, 1313754624, 1313754702, 1313754702, 1313754702, 1313754702, 1761607680, 1883041848, 1883041848, 2130706432, 2147418112};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}


	@Test
	public void test8() {
		int key = 640034342;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {171982912, 589505315, 589505315, 589505315, 589505315, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640038711, 640038711, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720377, 673724729, 674838841, 674838841, 707406378, 707406378, 707406378, 707406378, 708327480, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249405, 725433661, 741092396, 741092396, 741092396, 741092396, 741092396, 741092396, 741092412, 741096458, 741096508, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778430, 774782526, 775831102, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621439, 791625535, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 842161244, 925247014, 926361126, 926361126, 926361126, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926492712, 943196798, 943204906, 943204906, 943208504, 943208504, 943208504, 943208504, 943208504, 956966952, 958933032, 960046630, 960047144, 960047144, 960047144, 960051496, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 1009527852, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1024077615, 1026239275, 1026239275, 1027418923, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1043213870, 1044266542, 1044266542, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1060056879, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109580, 1077031474, 1077952562, 1077952562, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1280060460, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068716, 1282174060, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1549556746, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549565052, 1549565052, 1551662204, 1551662204, 1551662204, 1616336727, 1616928864, 1616928864, 1616928864, 1616928864, 1616928864, 1616928894, 1618902654, 1819036748, 1819036748, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 2004318039, 2004318071, 2004318071, 2004318071, 2004318071, 2004318071, 2004318071, 2086427740, 2088524892, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2120245344, 2122211424, 2122219104, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}

	@Test
	public void test9() {
		int key = 522593830;
		FIND_IN_SORTED find = new FIND_IN_SORTED();
		int[] array = {-2130706601, -9671572, -137, 2631720, 170864447, 171982912, 173833340, 589505315, 589505315, 589505315, 589505315, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034359, 640038711, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720360, 673720377, 673724729, 674838841, 674838841, 677642240, 707406378, 707406378, 707406378, 707406378, 708327480, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 725433661, 741092396, 741092396, 741092396, 741092396, 741092396, 741092396, 741092412, 741096458, 741096508, 741096508, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778414, 774778430, 774782526, 775370551, 775831102, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621423, 791621439, 791625535, 791625535, 792674111, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 842150450, 842150492, 925247014, 926361126, 926361126, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365495, 926365502, 926492712, 943196798, 943204906, 943204906, 943208504, 943208504, 943208504, 943208504, 943208504, 956966952, 958539816, 960046630, 960047144, 960047144, 960051496, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 960051513, 1009527852, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580540, 1010580608, 1027423531, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1043213870, 1044266542, 1044266542, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1061103142, 1061109551, 1061109551, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109567, 1061109599, 1061112908, 1077952562, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1077952576, 1110125355, 1248619628, 1277963308, 1280060460, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1280068684, 1345466930, 1414812756, 1414812756, 1416918132, 1465341696, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1465341783, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556828, 1549556860, 1549556860, 1549565052, 1549565052, 1551719516, 1616336727, 1616928864, 1616928864, 1616928864, 1616928864, 1616928864, 1616928894, 1618902654, 1811939583, 1816939596, 1819036748, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1819044972, 1953789040, 2004318039, 2004318071, 2004318071, 2004318071, 2004318071, 2004318071, 2004318080, 2084388157, 2086427740, 2086427740, 2088524892, 2088533084, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2120245344, 2122211424, 2122219104, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134};
		int loc = find.find_in_sorted(array, key);

		if (loc != -1) {
			assertTrue("The value of array's location is not equal to the key value", array[loc] == key);	
		} else {
			for (int i = 0; i < array.length; i++)
				assertTrue("The key value is in the array, but program did not find it", array[i] != key);
		}
	}
}
