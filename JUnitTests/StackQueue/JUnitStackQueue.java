
import org.junit.Test;
import static org.junit.Assert.assertEquals;

public class JUnitStackQueue {

	@Test
	public void test() {
		int driverSelection = 1;
		int op = 7;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test1() {
		int driverSelection = 0;
		int op = 7;
		int input = 6184542;

		int[] arrStack = {1583242846, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 1583242846, 1583242846, 1583242846, 1583271887, -815899042, 1583242846, 1583242846, 1583242846, 1583242846, 1581866590, 1583242846, 1583242846, 1581080158, 1583242846, 1583242846, 1583242846, 1582915166, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1578131038, 1583240286, 1583242846, 1583636062, 1583242846, 1583242846, 1583242846, 1583242846, 1577723430, 640034342, 640034342, 640035366, 640034342, 640034342, 640034342, 640034342, 640034343, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640427558, 640034342, 640031782, -1684301018, 640034342, 640034342};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test2() {
		int driverSelection = 1;
		int op = 8;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 2053005051, 1583242846, 1593663070, 1583242846, 1583243004, 1583242846, 1583242752, 16777020, -535822242, 1584160350, 1398693436, 2147427878, 175930490, 2088533116, 2088533116, 2088664158, 1583242846, 1584094844, 589702733, 640034431, 640034342, 640034342, 1059464742, 640034559, -8388826, 405153318, 640028966, 640034342, 639836966, 640034342, 640034398, 1583222822, -2144983514, 640034355, 639836963, 589702694, 640034342, 643718750, 1583228480, 640034342, 640034342, 639641126, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034364, 2097151868, -1837335428, 2088533116, 2088533116, 2088533116, 2088696444, 2080375296, 8158332, 2088533116, -1937998724, 2084732028, 2088533116, 640034304, 539173667, 595525683, 589505315, 592651043, 590029603, 589552163, 589505315, 589505315, 589505315, 52896547, 589498915};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(75, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test3() {
		int driverSelection = 2;
		int op = 4;
		int input = 1583242846;

		int[] arrStack = {638920230, 321267266, 640034559, -14277082, 640034314, 2082700326, 640034342, 639836963, 2088533027, 1142299939, 589505315, 589505315, 603914240, 640041491, 640090111, 914093091, 589505315, 595360892, 591664669, 589505315, 589505315, 589561600, 6425, 421100672, 2088526972, 2088533116, 2082677539, 589505304, 589505315, 589505315, 2302755, 170074915};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, -8454144, 1583242790, 640033300, 640034304, 554958886, 643703316, 640056444, 2086370428, -2147477223, 435059836, 2088664188, 2088533116, 2088533116, 637544212, 2500134, 640040230, 640034342, 640034342, 640034342, 640034342, 640040742, 640034342, 640034342, 640034342, 640034342, 640034345, 1701127718, 119940646, 640034370, 321267455, -181, 1263225675, 1263225675, 1263225675, 1263225675, 1263225675, 1263225675, 1263225855, -2144983428, 2088533116, 170074915, 589505404, 2088510243, 589112188, 2088533116, 2083071563, -1404351669, 1263225675, 1263225675, 1263229771, 1263225675, 1263225675, 1701143909, 1701143909, 1702913381, 1701143909, 1701143909, 1701143909, 1701137227, 640034342, 321266467, 589505297, 593765244, 2088511014, 640034342, 640034342, 640034432, 1644825, -293831556, 2122087548, 2088533116, 2088533030, 640034342, 640041491, 640090111, 646318627, 589528099, 1142299939, 589505315, 589505315, 603914240, 640041510};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(52568611, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test4() {
		int driverSelection = 1;
		int op = 5;
		int input = 2019450462;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1585216547, 589505315, 589505374, -564245410, 1583242846, 1583242846, 1583242846, -1352769961, 1583251806, 589505315, 589505455, 589505331, 589510238, 255, 1583242846, 1583242846, 1583251294, 1583242822, 1583242752, -10592674, -402432418};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(995711232, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test5() {
		int driverSelection = 2;
		int op = 2;
		int input = 1583242768;

		int[] arrStack = {640689664, 19277350, 640034339, 645692542, 2088533027, 589505315, 589505315, 589561855, -8436982, 640034316, 640034334, 637534246, 639575590, 645692540, 2080379004, 2054978684, -1753449348, 2088533116, 2088533116};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1579558438, -32768, 640034342, 640034342, 640034342, 2503203, 593387102, 1583242846, 1582587478, 1448498774, 1448477270, 1583240798, 1583236446, 1583242880, 1583242846, 1583242846, 640034342, 640034342, 640076237, 1867907072, 192894550, 1449025110, -657601242, 640034342, 640034342, 1176905281, 640034342, 640034342, 640034342, 907028006, 640034342, 640034342, 32767, 640034342, 640034342, 640034342, 640034315, 640034342, 640034333, 637543986, 589505315, 589505315, 606282519, 589505323, -1, 589505315, 589505318, 640034342, 641869350, 640034342, 640034342, 640034342, 640034428, 2088533116, 2088533116, 2088533147, 2088532145, 2088533116, 2088533116, 2088533107, 2088516732, 2092006524, 2088533116, 2088533116, 2087943292, 640034470, 103155494, 640034314, 2088505468, 1013349500, 2088533116, 2088533092, 2088533116, 2088533116, 2088533030};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			
			assertEquals(0, sq.driverQueue(q, op, input));

		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test6() {
		int driverSelection = 1;
		int op = 0;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(1583242846,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());
		} else {
			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test7() {
		int driverSelection = 1;
		int op = 1;
		int input = 1149009020;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {639836963, 589505315, 593387024, -1822532002, -1, 1583242846, -808464433, 2088533081, -1787003780, 2088533116, 1583242846, 274620026, 1582718558, 2088533116, 2088533116, 2088533116, 2088795391, -8388484, 33586300, 2088533116, 1579559974, 640073663, -1077949761, -1077952577, -1077952577, 640035622, 640034342, 640034342, 645661194, 640034342, 589504291, 603930623, -14474461, 589505318, 640034319, -33546979, 494937724, 2088533116, 2086559249, 1585216636, 33586300, -1395666993, 170272294, 639836963, 589505457, -808464433, 2088533083, 2088533116, 2088533116, 2088510243, 1663247139, 589505315, 595355516, 2088533116, 2088533116, 2088313777, -808464433, 2088533083, 2088533116, 2088510276, 589561728, 2088533116, 2088533116, 2088531580, 2088533116, 2088533116, 2088533116, 2089385084, 2088537480, 2089581590, 593362944, 589505315};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);
		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test8() {
		int driverSelection = 0;
		int op = 4;
		int input = 1583242846;

		int[] arrStack = {1583242846, 1583242871, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583227683, 589505315, 589505315, 589505315, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583251294, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640048734, 1581342298, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242762, 640034342, 640034342, 640034342, 640025600, 640034342, 640034342, 640034342, 640034342, 640034342, 644228646, 640034342, 640034342, 640034342, 640034342, 640034342, 640034310, 640034342, 640034342, 640034342, 638592547, 589505315, 589505315, 589507875, 589505315, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034314};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1280068656, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test9() {
		int driverSelection = 0;
		int op = 3;
		int input = 1583244894;

		int[] arrStack = {2085837918, 1432233510, 640033571, 589505315, 656614179, 589505333, 589505315, -1071439069, 589505404, 643718750, 1583242846, 1904213854, 1583242846, -2141299106, 1661035512, -117901064, 1583242846, 1583242849, 1583242846, 1583242846, 1298013790, 1584949367, 1583242869, 1583249246, 1583242846, 1583242846, 1583222878, 1583242853, 1734222627, 589505315, 589520478, -2147483648, 640034319, 640034342, 640057126, 640034342, 640034342, 640034342, 640050214, 640034342, 640038182, 656811558, 640056444, 2088533030, 640036156, 338044454, 640034342, 640034342, 640034342, 637535360, 270935590, 270935590, 640034342, 640034432, -14277070, 640039462, 640034342, 639836963, 589505315, 587333670, 648160806, 507717170, 640039206, 640034342, 640034431, -14277082, 646850221, 841360906, 1870332159};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test10() {
		int driverSelection = 2;
		int op = 5;
		int input = 589505315;

		int[] arrStack = {1583242846, 1583242846, 1583242846, 1583242846, 640034342, 640034342, 637558366, 1079926366, 1583242846, 170272294, 640041766, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {589505315, 593387102, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(50529027, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test11() {
		int driverSelection = 0;
		int op = 2;
		int input = 1583242846;

		int[] arrStack = {-842150451, -842150451, -842150451, -842150451, -842150451, -842150618, 638976000, -465557978, 640024832, 1583242846, 1583242846, 1583242869, 16, 1583245406, 1583242846, 1583242846, 1583242855, 1583227683, 589505468, 590546467, 587211555, 589505383, 589505333, 589505326, 589505315, 589505306, 589505315, 589505315, 587211555, 1677730595, 589520478, 1583242846, 1583242846, 1583242846, 1583242846, 1583242823, 1197366878, 1583242846, 1583242846, 1968449062, 640034342, 640034342, 640024703, 587202562, 2302755, 589505315, 589496320, 9766, 136717862, 640034342, 640034361, 539371560, 1093150775, 673588774, 942024230, 640034353, 640027260, 2088533116, 2088533116, 2088533116, 2088533100, 2081717280, 285179004, 2087222396, 2088533116, 2088524299, 2080406652, 2088533116, 162940, 1820075555, 589505315, 891495203, 513352483, 589505331, 589512483};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(38, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test12() {
		int driverSelection = 2;
		int op = 3;
		int input = 1579361059;

		int[] arrStack = {1820097660, 2088533116, 2088532993, 124, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2081048099, 589505315, 824386339, 589505315, 587277091, 589505315, 640034339, 589505315, -402447581, 589500963, 589505315, 589529123, 589505315, 589505315, 589505315, 589505315, 589512995, 589505315, 589528188, -1937998724, 1770093692, 2088533116, 2088533116, 2088533116, 589505315, 589505315, 589505315, 589505280, 2133009187, 589505315, 589505315, 589505315, 589505315, 593699619, 589505315, 589505290};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, -41378, 1583242846, 1583242846, 1583242846, 1583242846, 1583779166, 1583242846, 1583242846, 1667128926, 1834901086, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 2120113758, 1577058304, 1079926366, 1583242846, 1583242752, 73293406, 1583242846, 1581866590, 1577058342, 640034342, 589505318, 640034342, 640034342, 640024576, 640034342, 640034342, 639827968, 75302, 262144, 891692582, 640028672, 638854694, 640034342, 639827968, 75302, 262144, 891692582, 640034342, 640034342, 640034342, 640886310, 640034342, 640034342, 640034342, 640034342, 638920230, 640034342, 237397030, 640034342, 656811558, 640034342, 640034342, 640034342, 640034342, 539371046, 640034342, 645692540, 2004318071, 2003269495, 2004318071, 2004318076, 2088533116, 2088533116, 2088533116, 2088533097, -2122548100, 2088533116, -1770226564};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test13() {
		int driverSelection = 1;
		int op = 2;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1952341598, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583264862, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 639641126, 640034342, 640034342, 640034342, 641541670, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640037158, 640034342, 641017382, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 175930492, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test14() {
		int driverSelection = 2;
		int op = 0;
		int input = -65442;

		int[] arrStack = {2088533116, 640050720, 2088533116, 2088566655, 31868, 2088533116, 2088533119, -8650736, 2088533116, 1920760956, -1837335428, 2088533116, 170074915, 992158502, 589505408, 2302755, 589505315, 589505315, 589505315, 589505315, 593387102, 1583242846, 1583264862, 1583242846, 1583242846, -1195853789, 589505315, 589505315, 268444451, 589513507, 593387102, 1583242846, 1583245406, 1583242846, 1583242846, 2120113758, 1583242787, 589439011, 589504035, 603979775, -14474241, -221, 589506086, 640034342, 1713775395, 589505315, 1680024355, 594092835, 589505315, 589504035, 589505315, 590160675, -1785358955, -1785359069, 589505315, 589505827, 589505315, 589506086, 640024576, 6563366, 640034342, 640034342, 640034342, 640034342, 640034342, 639836942, 589505290};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-1195853640, -1195853640, -1198457088, -83886209, -10592768, 1048670, 1583244894, 1583242846, 2088533082, 2080406652, 2088501504, 2080406652, 1593835519, -2141299106, 1583242846, 1583242816, 1584815713, 1583242846, 1577074236, 1585216636, 2088510302, 1583242762, 640034342, 638451712, 32646694, 654311295, -8618889, 2088533119, -1988330372, 2081423484, 8158332, 2088533116, 8158246, 640034352, 640034342, 640034342, 640034342, 1713776349, -40154, 640034342, 858138150, 640034342, 640034342, 640034342, 640047420, 643114534, -400153059, 640034342, 640032807, 640034342, 405153318, 640067110, 654311206, 640034342, 203826700, 640034342, 640034342, 1109796390, 639575590, 641613898, 354821670, 640028710, 640034342, 1042680444, 2088538236, 2088533116, 2088533116, -1820558301, 589505315, 639836963, -2147451780, 2087550076, 2088598652, 2088533247, -2146403204};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-606348350, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test15() {
		int driverSelection = 1;
		int op = 3;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1130258014, 1583242846, 1583242768, 6184542, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1584356958, 1583235934, 1583242846, 1583242846, 1583046238, 1583242846, 1583242846, 1583242846, 1583244382, 1579558438, 640034342, 220603907, 640034342, 640034342, 639641126, 640034342, 640034385, 1364283729, 1062293841, 1364272678, 640034342, 640034308, 2533414, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640050176, 9766, 640034342, 270935590, 640034342, 640030246, 640034342, 640036390, 639705891, 589299747, 589505315, 1073741824, 640034342, 640026150, 640034342, 640038694, 640034342, 606283302, 640027260, 2089843836, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088008828, 2088533120, 2088533116, 2088533116, -1736672132, -1787003780, 2088534140, 2088539004, 2088533116, 2088533116, 2086763644, 2088533116, 2082677624, 2087812220, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533088, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test16() {
		int driverSelection = 1;
		int op = 3;
		int input = 1577059328;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242590, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, -631349666, 1577723430, 640034342, 640027686, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034086, 640034342, 640034342, 639510054, 640034342, 175930492, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test17() {
		int driverSelection = 0;
		int op = 3;
		int input = 1583242846;

		int[] arrStack = {29278, 1600020062, 1583242846, 1583251342, 2086559348, 1581145694, 1583242846, 1583250504, 1581997662, 1583240798, 1583242846, 1583242846, 1583242846, 2053004894, 1583242846, 1583242846, 1583242846, 1583243007, 1577723430, 640034342, 645867046, 254189600, -1600085856, -2036293472, -1600117981, 589505315, 589512995, 589505315, 589702691, 640034304, 65574, 640034342, 640034598, 640034559, 589505315, 589505315, 153297699, 2088533116, 2088533116, 2088533116, 2088533030, 640034342, 640056444, 2088533102, 2087287932, 2088533247, 2088533116, 2088533116, 2088533116, 2088467580, 2088511014, 589505315, 587235584, 438510371, 589702683, 455475238};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test18() {
		int driverSelection = 1;
		int op = 6;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583244638, 1583242846, 1583242846, 1583235678, 1583242846, 1147035230, 1583242846, 1583242846, 1583242905, -1717986978, 1583230808, 1577066534, 640028710, 1027999231, -16384001, -41378, 1583280639, 24158, 874915366, 1583242846, 1583242846, 1583242818, 1583242790, 640090111, -14221313, -55684, 2088533116, 2088570240, 2147483647, 640033574, 640049702, 640024577, 9852, 8158332, 0, 1507328};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test19() {
		int driverSelection = 0;
		int op = 8;
		int input = 1683906142;

		int[] arrStack = {640034342, 640027939, 589505315, 589505321, 589506086, 640034342, 640034342, 640034342, 1583235166, 1584291422};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(10, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test20() {
		int driverSelection = 1;
		int op = 2;
		int input = 1583226880;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242849, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583248222, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034354, 640034342, 640034342, 640034342, 640034342, 638221436, 2088533116, 2088533116, 2088533116, 2088533116};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test21() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {1583242846, 1583226462, 1583242846, 1583242838, 1583636082, 1583230558, 1583238750, 1583242846, 1583242846, -1751672937, -1751672937, -1751672974, 1583245918, 1585012318, 1583242846, 1583242846, 1583242846, 1314807390, 1583242816, 1583242846, 1784569438, 1585252902, 640034342, 320017171, 320017171, 321267238, 640056441, 640034342, 640034342, 421930534, 640033571, 539173667, 603979711, 2133009187, 1680034086, 640034342, 536838182, 640034342, 640027942, 640034342, 640034342, 640033318, 640034342, 640034342, 640034342, 640034342, 640034342, 640042022, 640034577, 640034342, 640024592, 640034342, 640034342, 642262557, 640034342, 1719434364, 1768515945, 1246718313, 1768515945, 2088533116, 2088533116, 2088530812, 2088530812, 2080400508, 2088533116, 2088436712, 2088529020, 2088533116, 2090695804, 2088540569, -1717986919, -1721144983, 1768528793, -1717986919, -1717790311};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test22() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1633574494, -65536, 1583246942, 1583242058, 1583242880, 6184542, 1583570526, 1583243007, -8388514};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1633508958, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test23() {
		int driverSelection = 0;
		int op = 0;
		int input = 1583242834;

		int[] arrStack = {1583242846, 1583242846, 1583242846, 1583242846, 1583242879, 16772446, 1583242846, 1583242820, 1583242846, 1583242846, 1583250556, 2088533116, -58979805, 589505315, 589505315, 237183779, 589505315, 589506339, 589702694, 640034342, 641017382, 640048734, 1583242846, 1583242846, 1583228480, 638527103, -349821402, 640033571, 593765375, 589505315, 1126376227, 589506086, -2044311770, 640034342, 640041222, 640034342, 640034342, 640034320, 637937190, 640034342, 640027152, 8158364, 2088533116, 2088533027, 589496576, 589528867, 2081193072, 2088533116};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1583242834,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test24() {
		int driverSelection = 0;
		int op = 2;
		int input = 1584296192;

		int[] arrStack = {640034428, 2088533027, 589508098, 589505389, 1835273984, 7171437};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583243007, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1581145694, 1583241054, 1583242812, 1585208926, 1583242846, 1583241822, 1583242750, 639903270, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640087334, 639836963, 640034342, 640034086, 640034342, 640034342, 640034354, 640034342, 640034342, 652739328, 2522236, 2088533116, 2083333670, 640034342, 640090111, -16744193, -8618872, 2088533116, 2089647228, 2088533116, 2088529022, 2088541820, 31745, 8150908, 2088527454, 1582915166, 1592256487, -404232217, -404232217, 1583242790, 640034428, 2088533116, 2082874236, 2088533116, 2088502250, 1585209724, 2088533116, 2088533100, 2122057852, 2088533116, 2082875060, 640034342, 640034342, 640034344, 136718079, 100097, 2088511014, 640034342, 640034342, 841360934};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1576071570, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test25() {
		int driverSelection = 1;
		int op = 7;
		int input = 1583242846;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 170272294, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 645660796, 2088501248, 106, 1077961054, 1583439454, 1583242846, 1583238607, 2088525350, 640034342, 640034342, 640024586, 603586560, -81583325, 656614160, 589505315, 589505315, 589307939, 594289408, 65312, 589505315, 589505523, 589505315};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test26() {
		int driverSelection = 0;
		int op = 0;
		int input = 589505315;

		int[] arrStack = {1583242846, 1583242846, 1012817502, 65536, 1583242846, 1583242986, 50331742, 1583242846, 1583242846, -2141299106, 1583242881, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242969, 1583242846, 1583242846, 1577058304, 22961758, 1583242078, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583242846, 1583221286, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 640034342, 638789158, 640034342, 640034342, 637538342, 640034342, 640034342, -32768, 640034342, 640057382, 640034342, 640034342, 640034342, 572925478, 640034342, 1583242846, 1583242846};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test27() {
		int driverSelection = 0;
		int op = 8;
		int input = -2095578897;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test28() {
		int driverSelection = 0;
		int op = 0;
		int input = 1581000263;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1581000263,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test29() {
		int driverSelection = 0;
		int op = 6;
		int input = 1313754702;

		int[] arrStack = {1313754695, 1313754695};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test30() {
		int driverSelection = 1;
		int op = 2;
		int input = 1935564288;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test31() {
		int driverSelection = 1;
		int op = 7;
		int input = 1935564378;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1585340030, 1449025151, 1582227038, -664900352, 1581080158, 1583234398, 1583242847, 1583242846, 1767794782, 1579155456, 6184576, 385876062, 1583242846};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(136314879, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test32() {
		int driverSelection = 0;
		int op = 8;
		int input = 959985456;

		int[] arrStack = {1734881386, 1885365293, 1986491767, 1731672376, 1751740009, 1714972728, 926446898, 1646294889, 1852336176, 942831928, 1751740006, 1969776183, 1966237495, 946238776, 1734501222, 930441011, 842086260, 1714972473, 1646276966, 1731737726, 556872257, 859129170, 1411401796, 1211253856, 928334403, 1461735235, 1263225943, 1364083526, 1331118927, 541737504, 1213416514, 1128925706, 572662306, 572662306, 572662306, 1313424712, 1312376906, 1126190660, 959537237, 926429536, 171454816};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(41, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test33() {
		int driverSelection = 2;
		int op = 4;
		int input = 541160820;

		int[] arrStack = {2032159329, 1500446719, -43057153};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1635018084, 542143087, 1735577551, -808464433, -808464433, -808464468, -808464433, -808464433, -808464513, 109, 542270832, 1189704224, 1182104186, 1769301816, 541160820, 1869439348, 1701060688, 1919903602, 1819091026, 1819436320, 1415926885, 1937009006, 1730168933, 1818521187, 1763724115, 1410364448, 1409294437, 541290354, 1886152056};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(41903423, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test34() {
		int driverSelection = 0;
		int op = 0;
		int input = 1852008791;

		int[] arrStack = {1868985463, 1631020320, 1415934836, 1768835360, 1181708909, 1634476109, 1416915055, 1685266534, 1717986921};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1852008791,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test35() {
		int driverSelection = 1;
		int op = 6;
		int input = 4941060;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1313748302, 1313754702, 1313754702, 1313754702, -1278430312, 414430060, 1769240838, 1247901281, 541970180, -2058477491, -966691073, -32808, -662765568, 14211288, -667459250, 1313754624, 8388451, 1835355200, 1695173696};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test36() {
		int driverSelection = 2;
		int op = 5;
		int input = 1852008791;

		int[] arrStack = {1911843071, -32938, 1701996137, 1669298793, 2137137407, 1629507940, 542143087, 1668440463, -1152227997};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1771474219, 32, 1415934836, 1768843040, 1181687885};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-1152227997, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test37() {
		int driverSelection = 1;
		int op = 2;
		int input = 813124128;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1885432319, -134, 2053730023, 542376000, 1953066599, 541812076, 1768820736, 541152084, 1330782292, 1768776992, 1130831948, 1632921461, 1634166048, 1130130800, 1970562418, 542335849, 1701733221, 175006565};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test38() {
		int driverSelection = 1;
		int op = 2;
		int input = 1852008791;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1868985463, 1634889057, 1814056293, 1953001316, 1931499109, 1919314275, 1635019119, 1847607669, 1946222433, 1952539680, 1349676903, 1918987552, -2130743199, 1769087046, 1970961001, 1852252244, 1702065257, 1852252235, 1701603694, 1667833921, 1398034258, 542402925, 1696613231, 1836084325, 2020177017, 541745526, 1629506927, 1677721961, 1852252236, 1634625397, 1634166048, 1131375984, 1970562418, 542335849, 1701733221, 175006565};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test39() {
		int driverSelection = 0;
		int op = 7;
		int input = 1852009253;

		int[] arrStack = {-16421115, -64140, 1868980596, 1885610064, 1919903599, 6646889, 1798915071, 542076038, 1850362956};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(224134842, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test40() {
		int driverSelection = 1;
		int op = 8;
		int input = 1852009253;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1868824575, 1634886944, 1969582964, 1768367120, 1869742335, 1998605669, 1952980992, 63343, 1971257453, 1702065257, -1078215749, -1149994691, 1249670753, 541949956, 7104876, 1730169953, 1815835936, 1131376008, 1970544894, 1629506944, 1079401, 1953119562, 2088132896, 1298493984};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(24, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test41() {
		int driverSelection = 0;
		int op = 0;
		int input = 1000;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1000,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test42() {
		int driverSelection = 0;
		int op = 1;
		int input = 1852008770;

		int[] arrStack = {1701073775, 1718908672, 1970564962, 24405348, 1342534275, 1735418221, 542255984, 1696756335, 1733386605};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1733386605, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test43() {
		int driverSelection = 2;
		int op = 1;
		int input = 1667458262;

		int[] arrStack = {1937009006, 1730168436, 1200382273, 542077029, 1850363212, 542401907, 23686759, 1449226853, 1701060608, 1667595264};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {552076121, 1835090208};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-1115519143, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test44() {
		int driverSelection = 0;
		int op = 2;
		int input = 1819044972;

		int[] arrStack = {-378994416, 1919779071, 541943072, 538976288, 538976288, 538976274, 538976288, 1075847200, 538976288, 538976288, 538997864, 1868832848, 1918396274, 1634550644, 1768843040, 1264918610, 1699439980, 1768842000, 272629760, 532555, 1701603689, 1768515945, 1768515968, -151, 1768515945, 1885951811, 1952738919, 541812076, 1768842089, 1634541632, 1694499177, -2140725164, 1702128000, 1730169701, 1818848867, 1763721555};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test45() {
		int driverSelection = 0;
		int op = 3;
		int input = 1851982167;

		int[] arrStack = {2004840960, 274097523, 1701408359, 541486962, 1835101438, 1281717352, -1872465147, -9697915, -2054847099, 1449488998, 1768120692, 1768910368, 1098216559, -1888586651, 1679839346, 1869050465, 1830834789, 1885432178, 2130706677, 2053729895, 541812076, 1768842089, 541152084, 1330782292, 1768776992, 1131375984, 1818589289, -1971773395, 1644126496, 1299145829, -8388609, 1128481603, 1124287299, 1128481603, 1128481625, 1128481625};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test46() {
		int driverSelection = 2;
		int op = 2;
		int input = 1851982167;

		int[] arrStack = {1174470778, 425926928, 1702196325, 1914721123, 1769169920, 1695179776};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {84, 1768776992, 1126198634, 1348827241, 1953701962, 978133024, 1382379617, 74588230, 2105178649, 1663111273, 1864376352, 538976288, 538976288, 538997248, -2142475159, 1953781620, 1953824767, 1953789044, 1962898537, 1709732991, 1768843040, 1281453671, 1969317733, 544173424, 1970234623, 542270832, 1627681312};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test47() {
		int driverSelection = 1;
		int op = 5;
		int input = 1852008791;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1006626153, 1663070975, -33024, 16842570, 67940, 1953980788, 2130739201, 16730624, 17392756, 2002875519, 8388741, -12909824, -2046870781, -395746463, 16777472, 7235360, 1415673441, 541945700, 1679840099, 1768185699, 1695178595};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-656444822, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test48() {
		int driverSelection = 1;
		int op = 0;
		int input = 16793605;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {83886450, 1912698226, 2020766322, -330974, -100334331, 84215168, -16423675, 84217349, 92209152, 524544, 1074070789, 100663295, -16448251, 84215040, 24277505, 1970436210, -1888325006, 1920103009, 2021099634, 1921479813, 1865513216, 1930352, 469762309, 84215045, 84214816, -12451841, 1846764810};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(16793605,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test49() {
		int driverSelection = 0;
		int op = 4;
		int input = 1770420512;

		int[] arrStack = {-252052611, 541945727, -9656081, -436209152, 1852274048, 15269887, -12496044, 4202578, 1761673293, 1400700926, -511672493, 1877376119, -256, 67135849, 51407873, 1297883424, 1615208736, 1615542100, 1024, 1768489811, 1879015408, -100990895, 1699428178, 1024, 1768489811, 1644134384, -100990895, 1701737061, 443445861};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(2145182922, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test50() {
		int driverSelection = 1;
		int op = 7;
		int input = 1852008791;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {375, 1634886944, 1415934836, 1768843040, 1181708909, 1634476109, 1702127727, 1685266518, 1701996137, 1667331177, -1955717055, 1970564973, 1635018084, 542143087};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(375, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test51() {
		int driverSelection = 1;
		int op = 4;
		int input = 6580567;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {761359392, 1298494568, 1868854048, 1442840576, 6513012, 1768910368, 1098216564, 1702126948, 542143087, 1349676920, 1918987552, 1382379617, 1769081158, 1970966633, 542401907, 1953066599, 189490540, 1768842090, 539899220, 1330782336, 32, 1131375984, 1828696576, 1868850540, 151587081, 151587081, 151587081, 151587081, 151614565, 1914721123, -8388609, 1970368365, 1635017573, 175399781};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(2059853960, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test52() {
		int driverSelection = 1;
		int op = 3;
		int input = 1869573999;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-1871745426, 1852731123, -26055327, 1811972351, -9935746, 1953066862, 440497524, 1869442158, 1852730990, 1845559154, 1835101216, 1298494568, 1331983220, 1768910368, 1098216559, 1835822702, 1852730990, 1854099570, 1869054049, 1830831461, 1885435506, 541488506, 2055368295, 541545075, 1768910368, 1098216559, -2023658907, 1686327515, -857997313, 1869443180, 1449755513, 373973366, 1663061359, 1282285633, -1871417491, 1635018084};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test53() {
		int driverSelection = 0;
		int op = 5;
		int input = -2147483648;

		int[] arrStack = {507715588, 255, -16776961};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-16777216, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test54() {
		int driverSelection = 0;
		int op = 8;
		int input = 1098874751;

		int[] arrStack = {16843009, 16843009, 16849665, 29429967, 67174395, -8396863, -1044289599, -675167745, -8404609, -1040195585, 2138237549, 694458748, 2088533135, -402456575, 8158332, 2088533109, 1852457343, 2139056192, 176121920};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(19, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test55() {
		int driverSelection = 0;
		int op = 6;
		int input = 825307441;

		int[] arrStack = {1852011552, 1667519497, 543384660, 244486802, -1835887982, -2037214610, 1667833953, 1679846976};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test56() {
		int driverSelection = 2;
		int op = 0;
		int input = 1852397379;

		int[] arrStack = {1952801824, 1349676903, 1918987552, 1382379617, 1769087046, 1970961001, 1852252244, 1702065257, 1852252235, 1701603694, 1667833925, 1398034258, 542402925, 1696613231, 1836084325, 2020177017, 541745526, 1629506927, 1684368489, 1852252236, 1634625397, 1634166048, 1131375984, 1970562418, 542335849, 1701733221, 175006565};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1718908769, 1919230036, 1702065257, 1852252230, 1870297722, 2054847098, 2054847098, 2048939621, 1919314275, 1635019119, 1847607669, 1953459553};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1893915334, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test57() {
		int driverSelection = 1;
		int op = 1;
		int input = 1533241687;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {40268876, 2002874981, 542401907, 1961520743, 541486962, 1663069216, 1182123648, 1868850540, 1768843040, 1281453777, 543957008, 8453999, 1684957045, 542343423, 1701733236, 1953789044, 812938356, 1953797408, 2019921184, 1635148040, -792279354, -960051514, -960051514, -964661404, 1701603694, 1730169953, 1852273952, 1400962932, -2039188364, 812938356, 1794405492, 2138338420, 1678406772};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);
		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

@Test
	public void test58() {
		int driverSelection = 1;
		int op = 2;
		int input = 73670714;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1986879744, 73670714, 1919897426, 341076333, 1696613239, 1835493975, -2022540768, 995646074, -2123471072, 1683319890, -2058391008, 1399023973, 1853842923};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test59() {
		int driverSelection = 0;
		int op = 2;
		int input = 404232216;

		int[] arrStack = {689442328, 404232216, 404229912, 236460056};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test60() {
		int driverSelection = 0;
		int op = 3;
		int input = 1852003671;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test61() {
		int driverSelection = 0;
		int op = 3;
		int input = 1869573999;

		int[] arrStack = {1868853103, 1869573999, 1869573999};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	
	@Test
	public void test62() {
		int driverSelection = 1;
		int op = 3;
		int input = 1634015488;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {508522597, 1767964760, 1952801824, 1182099720, 1281445991, 1969321515, 981624169, 1634015488, 2020502894, 1835103333, 2132821621, 1762151521};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test63() {
		int driverSelection = 1;
		int op = 8;
		int input = 1852044119;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test64() {
		int driverSelection = 0;
		int op = 8;
		int input = 1868916281;

		int[] arrStack = {1784379249, 1668096107, 1785296232, 959277661, 1718704995, 1869360160, 1785620598, 2036492647, 959983718, 959655279, 1533217133, 1819484267, 1634624618, 1651931495, 1714895217};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(15, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test65() {
		int driverSelection = 0;
		int op = 5;
		int input = 589505315;

		int[] arrStack = {589497379, 589505315, 589505315, 1312706126, 1313754702, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1246372629, 589505315, 589505315, 589505358, 1481526862, 1313754698, 1279937098, 1246382666};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-33554432, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test66() {
		int driverSelection = 0;
		int op = 0;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 990522173, 725429035, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 1027423549, 1027423549, 1027423550, 1044266558, 1044266558, 1044266044, 1010580540, 1010580540, 1010580540, 1010576906, 1579965996, 1579953213, 1027423549, 1027423549, 1027423549, 1027423498, 555819297};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(2122219134,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test67() {
		int driverSelection = 1;
		int op = 0;
		int input = 2122219134;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 993737531, 993737531, 989936443, 993737531, 993737531, 993737531, 993737531, 990522173, 725429035, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027418923, 725433661, 1027423531, 724254013, 1027423549, 1027423549, 1027423549, 1027423498, 555819297};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(2122219134,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());
		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test68() {
		int driverSelection = 0;
		int op = 4;
		int input = -1988198786;

		int[] arrStack = {2122219134, -1837198301, 589505338, 976894522, 976894522, 976894522, 976894522, 976763450, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 977812026, 976894522, 976894522};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1953789044, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test69() {
		int driverSelection = 2;
		int op = 2;
		int input = -1988198786;

		int[] arrStack = {-1852730991, -1852730991, -1852730991, -1852730991, -1852730991, -1852730991, 269488144, 269488144, 285151248, 269488144, 269488144, 269488144, 285147136, 16125968, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 270274576, 269488144, 269488144, 269488144, 269516800, 252710928, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488158, 269488144, 269488144, 892679477, 891893052, 269488144, 269488144, 269488144, 269488144};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {269488144, 269509777, -1852730991, -1852730991, -1886285423, -1852730991, -1852735343, -1852730991, -1852730991, -1852730991, -1852730991, -1852730991, -1466855023, -1852730991, -1852730881, -32111, -1852730991, -1852730991, -1852730990, -1852730991};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test70() {
		int driverSelection = 0;
		int op = 8;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122211875, 589505315, 589505315, 589505315, 589505315, 589505315, 589514275, 589505315, 589505339, 993737533, 1027423549, 1027423549, 1027423549, 1027423549, 1026239275, 1027423549, 1027418923, 725433661, 1027448992, -1600085856, -1600085856, -1600085983, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 553652224, 5131854, 1312706126, 1313754702, 1313754702, 1313754702, 1313754696, 1682853454, 1313754702, 1211775546, 976894522, 975714874, 976894522, 976894522, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754667, 993737531, 170605867, 1026239275, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249405, 1027423549};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(61, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test71() {
		int driverSelection = 0;
		int op = 2;
		int input = 2122219134;

		int[] arrStack = {976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894523, 993737531, 993737531, 993737531, 993737531, 993737535, 993737531, 993737531, 170605824, 67108907, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 725433661, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1026239275, 1027423549, 1027418923, 725433661, 1027423549, 1027423549, 1027423549, 1027410465, 555819297, 555819297, 558637345, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 2122219134, 2122219134, -1602322818, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2121825918, 2122219134, 2122219134, 2122215806, 2122219134, 545160830, 2122219134, 2122219156, 2122219134, 2122219134, 2122219134, 1044266558, 1044266558, 272514622, 1044266558, 1044266558, 1044266558, 1044134972, 1010580540, 1010580540, 1010580540, 1009650270, 744369246, 741092396, 741092396, 741092396, 741092398, 774778414, 774778414, 774778414, 774778414, 774776101, 623191333, 623191333, 761212255, 1179010630, 1179010630};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(73, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test72() {
		int driverSelection = 0;
		int op = 0;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505406, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2116231971, 589505315, 589505315, 589505315, 589505315, 589505315, 589521920, 8995, 592334414, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1312438842, 976894522, 976880128, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894779, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993737482, 725429053, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 100, 724249387, 1027423549, 1027423549, 1027423549, 1027423549};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {
			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(2122219134,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());
		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test73() {
		int driverSelection = 0;
		int op = 1;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 1480211002, 976894522, 989462528, -96847302, 976894522, 976894522, 976894522, 976894522, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 990522239, -12768469, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1023410176, -2143470275, 1027418923, 725433661, 1027423531, 724380989, 1027423549, 1027423549, 1027423549, 1027423498, 555819297};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(555819297, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test74() {
		int driverSelection = 0;
		int op = 1;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 1480211002, 976894522, 989462528, -96847302, 976894522, 976894522, 976894522, 976894522, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 990522239, -12768469, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1023410176, -2143470275, 1027418923, 725433661, 1027423531, 724380989, 1027423549, 1027423549, 1027423549, 1027423498, 555819297};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(555819297, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test75() {
		int driverSelection = 0;
		int op = 6;
		int input = 858993459;

		int[] arrStack = {858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, -1238158541, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993446, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 993211230, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993493, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993458, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 858993459, 1345532723, 858993408, 2134061875, 858993459, 858993459};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
	public void test76() {
		int driverSelection = 2;
		int op = 5;
		int input = 1188550615;

		int[] arrStack = {1179010630, 1179010763, -875823105, -875836469, -875836607, 1766217064, 1190938182, 893666826};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -673720425, -673720361, -673720347, -673720361, -673720361, -673720361, -673720361, -673720361, -673720361, -1227368489, -2133338153, -673720361, 1179012435, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105376070, 1178996992, -673720361, 2105376125, 2105376125, 2105376125, 2105376125, 2105376125, 2105361990, 1175519447, -673720361, -673720361, -673720361, -673720361, -673757626, 1297303110, 1174470782, -1603699040, 1766214214, 1397966406, 1178748671, -186, 1174470726};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(219946465, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test77() {
		int driverSelection = 1;
		int op = 1;
		int input = 1330597711;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597723, 1330597711, 1330597711, 1330598479, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1332170575, 1330597711, 1330597711, 1330597711, 1332563791, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1331384143, 1330597711, 1330597711, 1380929359, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597735, 1330577424, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597455, 1330597711, 1330597711, 1330597711, 1330597711, 1330597711, 1330597648, 5197647, 1330597711, 1330597711};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {
			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test78() {
		int driverSelection = 0;
		int op = 2;
		int input = 1330597711;

		int[] arrStack = {2122232446, 2122219048, 2122219165, 2116231971, 4203293, 589505327, 589516366, 1316922950, 1175076899, 488842019, 589505358, 1313767078, 1178995366};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test79() {
		int driverSelection = 1;
		int op = 3;
		int input = 2122219134;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1077755262, 2114981904, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488129, 269488144, 269488144, 269488144, 269487376, 269488144, 269488144, 269499709, -2057618115, 1023475517, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 269488144, 219156496, 269488144, 269488144, 1027442011};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test80() {
		int driverSelection = 0;
		int op = 3;
		int input = -1915892275;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-842150451, -842199040, -842150451, -842150436, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842142259, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451, -842150451};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test81() {
		int driverSelection = 1;
		int op = 6;
		int input = 555819297;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297, 555819297};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test82() {
		int driverSelection = 0;
		int op = 3;
		int input = 1869573999;

		int[] arrStack = {1869573999, 1869573999, 1869573999, 1869573999, 1869573952, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869565807, 1871277935, 1869836143, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869576815, 1836019567, 1869558127};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test83() {
		int driverSelection = 1;
		int op = 2;
		int input = 2147422208;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {589505506, 1065353251, 591864611, 675235397, -415283643};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test84() {
		int driverSelection = 0;
		int op = 3;
		int input = -32430744;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test85() {
		int driverSelection = 1;
		int op = 4;
		int input = 168430090;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(336860180, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test86() {
		int driverSelection = 2;
		int op = 1;
		int input = -1749560649;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));


		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test87() {
		int driverSelection = 2;
		int op = 4;
		int input = 2122219263;

		int[] arrStack = {1010580540, 1010580540, 1010594174, 2122219134, 2122219134, 2122350206, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122202686, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266556, 1010580540, 1010580540, 1010580540, 1010580526, 173943902, 744369196, 741092396, 741097022, 1044266044, 1010580540, 1010580540, 1010580540, 1008935715, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1312247374, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 977615563, 976894522, 976894522, 976894522, 976894522, 977680954, 976894536, 641350202, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 995572539, 990522173, 725429035};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-8388482, 2122219043, 589504803, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1312247374, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 977615563, 976894522, 976894522, 976894522, 976894522, 977680954, 976894522, 641350202, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 995572539, 990522173, 725429035, 724249389, 724249387, 724249387, 724249387, 724249387, 724249387, 724249470, 2122219646, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219070, 1044266558, 1044283008, 4079166, 1044266558, 1245593150, 1044266558, 1044266558, 1044200765, 1027423549, 1027423549, 1027456317, 1027418923, 725433661, 1027423531, 724254013, 1027423549, 555819297, 555843220, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, -1669431792, 2122219134, -2004976002, 2122219520, 1044266558, 1044266570, 1044266558, 1044266558, 1044266558, 1044266558, 1010580507};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));


		} else {

			assertEquals(-8388482, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test88() {
		int driverSelection = 2;
		int op = 3;
		int input = 1448498774;

		int[] arrStack = {1448498774, 1448498774};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1448498774, 1449416278};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));


		} else {

			assertEquals(1, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test89() {
		int driverSelection = 0;
		int op = 7;
		int input = 1128489795;

		int[] arrStack = {1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481663, -12369085, 1124139075, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481541, -64189, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1126187843, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603, 1128481603};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test90() {
		int driverSelection = 1;
		int op = 7;
		int input = 785366461;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-1936946036, -1936957556, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1938256756, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1935831924, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036, -1936946036};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1936946036, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test91() {
		int driverSelection = 2;
		int op = 0;
		int input = 2122219134;

		int[] arrStack = {555819297, 555819297, 555819297, 555819297, 421601569, 555819297, 555819297, 555819297, 561938046, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2118155902, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2123464318, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2122219134, 2118008382, 1044266558, 1044266558, 1044266558, 1044266558, 1044266558, 1044266044, 1010580540, 1010580540, 1010580540, 1010576906, 1579965996, 1579952939, 725433661, 1027423549, 1027423549, 1027423549, 1027410476, 746531884, 741092396, 741092396, 741223982, 774778414, 774778414, 774778414, 774778414, 623191333, 623191333, 623193439, 761212255, 761212224, 1077952576, 1077952576, 4210752};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 760106574, 1313754702, 1313754702, 1313754682, 976894522, 976894522, 976894522, 977943098, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 993737531, 993737531, 993737531, 993737531, 993737531, 993737475, 993737531, 990522173, 725429035, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724254013, 1027423549, 1027417149, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027418923, 725433661, 1027423531, 724254013, 1027423549, 1027423549, 1027423549, 1027423498, 555819297};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(2126429886, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test92() {
		int driverSelection = 1;
		int op = 8;
		int input = 976894522;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1313754702, 1313751040, 20046, 1313754702, 1313754702, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976960315, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993724971, 1027226170, 976894522, 976894522, 976894779, 993737531, 993737531, 993737531};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(30, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test93() {
		int driverSelection = 1;
		int op = 5;
		int input = 2085046087;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1179010564, 172377604};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1006632960, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test94() {
		int driverSelection = 0;
		int op = 0;
		int input = 2122219134;

		int[] arrStack = {2122219134, 2122219043, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505315, 589505358, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754702, 1313754682, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894522, 976894565, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 993737531, 990522192, 725429035, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249387, 724249560, 724254013, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 742210877, 1027423549, 1027423549, 1027423549, 1027423549, 1027423549, 1027407888};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(2122219134,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(1006632960, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test95() {
		int driverSelection = 1;
		int op = 2;
		int input = 538976288;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2105376, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test96() {
		int driverSelection = 1;
		int op = 3;
		int input = 168430090;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {168430090, 168430090, 168430090, 168430090, 168430090, 168034314, 168430205, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168430090, 168626698, 1175063050};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test97() {
		int driverSelection = 0;
		int op = 8;
		int input = 1868916281;

		int[] arrStack = {1784379249, 1668096107, 1785296232, 959277661, 1718704995, 1869360160, 1785620598, 2036492647, 959983718, 959655279, 1533217133, 1819484267, 1634624618, 1651931495, 1714895217};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(15, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test98() {
		int driverSelection = 0;
		int op = 3;
		int input = 959985720;

		int[] arrStack = {-61976728, 1761633884, 1751529329, 846561383, 926496872, 1768843622, 2003372600, 402687488, 1761633909, -10078209, -12424855, 1769947714, 1258894441, 780345463, 1768777832, 274152526, 1127088128, 1333750062, -2095024279, 1835558928, 1212699460, 742607370, 956334080, 3682656, 171454816};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test99() {
		int driverSelection = 1;
		int op = 8;
		int input = 1283207778;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2162689, 1461735235, 1683311731, 912924791, 1078888, 37455, 1134363833, 1450591788, -2145348974, 574095360, -8449, -11067336, 829551929, 572662353, 1317037456, 1162366719, 1461735235, 1691025440, 845291639, -1185520240, 1162366719, 1461735235, 1682861669, -1862271104, 4780878, 740176256, 14385, 14385};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(28, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test100() {
		int driverSelection = 0;
		int op = 8;
		int input = 959985456;

		int[] arrStack = {1734881386, 1885365293, 1986491767, 1731672376, 1751740009, 1714972728, 926446898, 1646294889, 1852336176, 942831928, 1751740006, 1969776183, 1966237495, 946238776, 1734501222, 930441011, 842086260, 572662306, 572662350, 1229277262, 961038915, 542000185, 828782695, 962732081, 1718040632, 2116104498, 1093875013, 1381245000, 1145582148, 1832334658, 1129783375, 1129007948, 1464946243, 1179604803, 1328433730, 541610820, 1111706122, 170009122, 572662306, 572662306, 575555909, 1213086024, 1245913166, 1144598880};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(44, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test101() {
		int driverSelection = 1;
		int op = 1;
		int input = 1801674801;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1735751527, 100663045, 1768843520, 41380206, 1751658552, 846805096, 1768842869, 1748514616, 1966236210, 2003398399, 2133866546};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test102() {
		int driverSelection = 0;
		int op = 1;
		int input = 660957472;

		int[] arrStack = {926955624, 1763210601, 1714972277, 1778385006, 1768306790, 1971283480, 1969841720, 946366826, 125202293, 276288, 946366830, 1768306790, 1971283480, 1969841720, 1718970880, 1048679, 926443125, 1731675214, 939465226, 570681378, 572662306, 1109550648, 1718976358, 410347878, 1416000874, 4096, 1731672166, 1969698628, 1312292634, 170009166, -2147465150, 961038915, 542000185, 828396855, 942759946};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(942759946, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test103() {
		int driverSelection = 1;
		int op = 6;
		int input = 660957472;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1931504490, 1613838436, 1765357671, 1362127472, 2130718070, 1735751527, 926496872, 1768843622, 946354231, 947204706, 544696686, 1751658552, 1331118927, 541737504, 1213416514, 1128925746, 2033739881, 1845589352, 1966568754, 1731672166, 1966630893, 1667643253, 1731408433, -2147391944};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test104() {
		int driverSelection = 0;
		int op = 8;
		int input = 959985456;

		int[] arrStack = {1298673770, 1885365293, 1986491767, 1731672376, 1751740009, 1714972728, 926446898, 1646294889, 1852336176, 942831928, 1751739981, 1969776183, -8388609, 946238776, 1734501222, 930441011, 842086260, 1714972473, 1646276966, 1731737726, 556872257, 70600018, 1411401796, 1211253856, 928334403, 1864388419, 1263225943, 1364083526, 1331101696, 65552928, 1213416514, 1128925706, 572662306, 572662306, 572662306, 1279870280, 1317029962, 1126190660, 959537237, 926429536, 171454816};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(41, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test105() {
		int driverSelection = 0;
		int op = 5;
		int input = 959985456;

		int[] arrStack = {946628967, 1748003440, 1617177974, 1735751527, 926496872, 1768843622, 1449670882, 947204706, 544696658, 1751658552, 1129259082, 1109411923, 1145196362, 168436479, 2132943394, 572662306, 572682336, 1680701031, -2022217929, 956301568, 6907425, 825377075, 893735508, 541606984, 843341879, 1430405975, 542065483, 1263294289, 1313031759, 1464028960, 1245847624, 1396982351, 1242171938, -8445406, 572662306, 572662350, 1229258752, -1553853, 542000185, 828396855, 942759946};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(114363091, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test106() {
		int driverSelection = 0;
		int op = 6;
		int input = 961445680;

		int[] arrStack = {1903260017, 1903243547, 1680670720, 6553856, -168886015, 16777473, -385753087, 16869984, 1903260017, 1903260017, 823878701, 100, 16840175, 16843008, 16902401, -536805119, 16859136, -8388863, 1073807231, -335544063, 16842991, 16842752, -285146880, -2142549225, 1330597711, 1330600015, 1326514433, 16900097, 574619686, 171966502};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
		public void test107() {
		int driverSelection = 1;
		int op = 0;
		int input = 1039201024;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {946354693, 84215272, 50331653, 84217856, 84215289, 67765753};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(1039201024,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
		public void test108() {
		int driverSelection = 0;
		int op = 3;
		int input = 1414812756;

		int[] arrStack = {1414812756};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
		public void test109() {
		int driverSelection = 1;
		int op = 7;
		int input = 184549632;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {845551463, 1111621633, 1516648448, 22701624, 1111701632, 1520313665, 859111491, 2113929215, 1212889057};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(845551463, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test110() {
		int driverSelection = 0;
		int op = 0;
		int input = 959985456;

		int[] arrStack = {1680373351, 1970759479, 959998083, 1852401208, 1748505363, 320026424, 1966236192, -1872138648, 1747269682, 2033739881, 1845493760, 272069938, 1731684454, 928330343, 1969698610, 825717862, 1077368114, 2000107570, 825717862, 1073741926, 1966630720, 1667643253, 1731408433, 342844984, 1740202528, 828794680, 16720177, 843146345, 1734881386, 1885365293, 1986476136, 1768843622, 946354231, 940580125, 488447261, 354229533, 494219874, 859129170, 1411395890, 1097099623, 1748003440, 1617177974, 1731749993, 1852401208, 1749566536, 843341879, 1426391295, 89080651, 1263294289, 1313822531, 1327516226, 541610820, 1111706122, 170018120};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(959985456,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

	@Test
		public void test111() {
		int driverSelection = 0;
		int op = 2;
		int input = 184549632;

		int[] arrStack = {570425344, 1682269229, 1986470449, 1616197432, 822084608, 1714972728, 926446876, 1645508457, 1852336176, 942831999, -9867674, 1969776183, 1966237495, 946238776, 1734501222};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test112() {
		int driverSelection = 2;
		int op = 4;
		int input = 1784688952;

		int[] arrStack = {1109411923, 1145193290, 168436258, 572662306, 572662306, 572673609, 1162366521, 1212826400, 1313093937, 1616197432, 828377656};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1970759479, 959998057, 1852401208, 1748514616, 1966236192, 2003398248, 1747990578, 2033739881, 1852208488, 1714910514, 1731672166, 1966630754, 1667643253, 1731408433, 930375224, 1736466976, 828794680, 947790129, 843133749, 1163023392, 1212434482, 1147156309, 1111709472, 1329810251, 1280790862, 1128681303, 1129259082};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(314004167, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test113() {
		int driverSelection = 1;
		int op = 8;
		int input = 825717793;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test114() {
		int driverSelection = 2;
		int op = 5;
		int input = 959985456;

		int[] arrStack = {926947688, 1768843622, 946361655, 947206754, 578251118, 1751664184, 846805096, 1770874485, 1751540592, 930441011, 842086260, 1714972473, 1646277001, 1731737726, 623981121, 859128658, 1411401796, 1211241749, 353703169, 353706773, 353703189, 353703189, 824320546, 572662327, 572138007, 1313424712, 1616197432, 558893624};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1734881383};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(558893624, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test115() {
		int driverSelection = 1;
		int op = 5;
		int input = 336860180;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {420746260, 336860180, 336860180, 1228483072, 101, 543910496, 825779305, 1734877290, 1885365293, 1988654455, 1732843832, 1751740009, 1714972728, 926446898, 1646294889, 1852309808, 942831928, 1750925158, 1969776183, 1969514295, 946238776, 1734501190, 930973980, 843341879, 1430405975, 542065483, 1263296593, 1308655695, 1464028960, 1245844040, 1396982339, 1242171938, 255, 572662306, 86123086, 1229277262, 961038915, 474895673, 828396855, 942759946};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(83886080, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test116() {
		int driverSelection = 1;
		int op = 2;
		int input = 939581183;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {942831928, 1751740006, 1969776183, 1966237567, -10065559, 1768515874, 572664610, 576738615, 942759946};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test117() {
		int driverSelection = 2;
		int op = 1;
		int input = 959985456;

		int[] arrStack = {2003398248, 1747990578, 2033739881, 1852208488, 1717974901, 1731408433, 930375224, 1731813920, 828794680, 947790129, 843133749, 1163023392, 1212434482, 1147156325, 1111709472, 1329810251, 1280774478, 1128681303, 1129259082, 1109411923, 1145193290, 168436258, 740434466, 572662306, 572673609, 1162366521};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1748514616, -1808637408};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(586148095, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test118() {
		int driverSelection = 1;
		int op = 4;
		int input = 959985456;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1747990638, 1060920, 1768845937, 175010417};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1749051558, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test119() {
		int driverSelection = 2;
		int op = 3;
		int input = 1680373366;

		int[] arrStack = {1313093937, 1616197232, 828639856};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1987471229, 2003304447, -9153224, 1740207136, -402391041, -15707648, 542455911, -1183571736, 67108863, 273809440};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test120() {
		int driverSelection = 0;
		int op = 7;
		int input = 959985455;

		int[] arrStack = {1734881386, 1885365293, 1986882925, 1835887981, 1835887981, 1835887981, 1835887981, 1829858669, 1832470602, 1126190660, 963210871, 1714970680, 926446898, 1646294889, 1852336176, 942831928, 1163023392, 1212434482, 1147156309, 1111709472, 1329808203, 1280790862, 1128681303, 1129263714, 544696686, 1751658552, 846805061, 1381245002, 1109411923, 1145193290, 168436258, 572662306, 572662306, 572673609, 1162366521, 1212826400, 1313093937, 1616197432, 828377656};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(828377656, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test121() {
		int driverSelection = 0;
		int op = 2;
		int input = 1111638594;

		int[] arrStack = {1111638594, 512, 1110980408, 2100453954, 1111638594, 962732032, 32824, 2116104498, 1228088099, 603946787, 589505315, 589505352, 1145582148, 1614239042, 1129783375, 1129013836, 1464946243, 1174438143, -14540254, 572653858, 575555909, 942563338};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(4, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test122() {
		int driverSelection = 2;
		int op = 2;
		int input = 961696800;

		int[] arrStack = {1751672936, 1751672936, 961696800, 1214269490, 1157562368, 4413243, 1715686219, 1280790862, 1128681220, 5185536, 16467, 1212824864, 1313093937, 1616197432, 828377656};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {552003128, 1744797542, 930438195, 842086295, 1075048, 1751672936};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test123() {
		int driverSelection = 1;
		int op = 3;
		int input = 2065722218;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {762739829, 2004367161, 946366830, 1768306792, 943145333, 845291639, 1768843368, 808989305, 946366830, 1718978406, 930427495, 1446535797, 945250915, 1714910567, 858927415};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test124() {
		int driverSelection = 2;
		int op = 0;
		int input = 1650681399;

		int[] arrStack = {-128, 16843009, 16843009, 33521409, 16843009, 16843009, 16843009, 16843112, 1332375680, -265456032, 1619066873, -263237809, 4485385, 959985586, -1296911694, -1296911871, 5197647, -536838080, 638222400};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {16901375, 960051513, 960051535, 1785757936, 762732640, -2130707984, 1330597632, 1148258617, 943174322, -1296911694, 960051513, 960051513};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(655123775, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test125() {
		int driverSelection = 1;
		int op = 2;
		int input = 1751672936;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1751674472, 1751672936, 1751672936, 1752066152, 1751672936, 1744835432, 2037213322, -1972869016, 1751672936, 1751672936, 1751646227, 1752788328, -1970632054, -1970632054, -1970632054, 65535, 1751672936, -129, 1758423144, 1751672936, 1750624360, 1751672832, 23619688, 1751672936, 1751673087, 6842472, 1751646312, 1751672936, 1751646617, -1459585280, 1684766464};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test126() {
		int driverSelection = 0;
		int op = 8;
		int input = 1868916281;

		int[] arrStack = {1784379249, 1668096107, 1785296232, 959277661, 1718704995, 1869360160, 1785620598, 2036492647, 959983718, 959655279, 1533217133, 1819484267, 1634624618, 1651931495, 1714895217};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(15, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test127() {
		int driverSelection = 0;
		int op = 1;
		int input = 1865232435;

		int[] arrStack = {1731800420, 1869241207, 1902341408, 1802135925, 1748577642, 1566994779, 1668246572, 543845992, 1987666537, 1731803184, 1715024685, 1868260105, 1835823904, 1801547364, 1784837753, 1734752057, 1899511858, 809044269, 1680896045, 828387429, 862337081, 929522281, 1702259299, 544697201, 1836085083, 1681484336, 1916299321, 1718968931, 2003461487, 1802532721, 1870146916, 963260530, 1714906978, 1701013877, 1785686903, 2018537324, 1902865764, 1786210608, 1903102308, 963260535, 1765095782, 1752065397, 1668755003, 1869248363, 2020634991, 1812554871, 1782146611, 1765356648, 1852142947, 2004315000, 1836150537, 1835297328, 1765369448, 1966367337, 1701014135, 1903127416, 1879652397, 808663352, 842018161, 1885042787};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1885042787, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test128() {
		int driverSelection = 0;
		int op = 6;
		int input = 1868916281;

		int[] arrStack = {1733064561, 1668093803, 1785296232, 960522845, 1718704995, 1869348864, 16803958, 2036492647, 960180310, 959655279, 1650813559, 661349130, 2004364379, 1868917045, -2130771968, -350945024, 16149099, 2003001201, 32768, 1668770405, 1869177699, 1784938541, 1681484336, 1919287655, 1785004288, 1885432166, 959658036, 1735751282, 1701474855, 1801652855, 2016172911, 2003383680, -100663046, 3369316, 1781558329, 1232505954, 1768372522, 810957107, 762274408, 1966866303, 1701014135, 1903127416, 1879662691, 1785033079, 1560897904, 175198072, 1534614288, 154274105, 2137421669, 1986685815, 1668247913};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test129() {
		int driverSelection = 2;
		int op = 5;
		int input = 100663045;

		int[] arrStack = {1342308454, 1717977188, 280146610, 1085452903, 1936156519, 1734826851, 158166096, 33580646, 1715495952, 8400941, 1734829927, -2140706969, 1734829927, 1734821735, 1734829939, 1734829927};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1814831200, 1853545475, 1651074873, 942696010, 1077083, 1661562220};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1734829927, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test130() {
		int driverSelection = 1;
		int op = 8;
		int input = 1868923961;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {30671, 1668085099, 1785228403, 543908206, 1684693623, 1765098497, -1971034875, 939536485, 862810223, 1533294954, -2130764544, 7274496, 6582136, -50838, 1668753259, 1661630328, 156987249, 1685547366, 861033570, 1667459635, 1717986832, 103, 7953765, 2003002718, 1802600305, 1870096693, 1140951684, 1695748981, 1986357859, 543227905, 1869248363, 2020634991, 1817933681, 1870096664, 963013496, 1834105205, 1986199352, 875572619, 1885042787, 1853243498, 1663058544, 158407012, 846164256, -1939249613, 1717986832, 103, 7953765, 2002979163, 1896506367, 828781417, 7760234, 1663066377, 16711712, 1630268927, -10927616, 66, 1111638594};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(57, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test131() {
		int driverSelection = 0;
		int op = 7;
		int input = 1868916281;

		int[] arrStack = {1784379249, 1668096057, 942695993, 536871424, 7037294, 4096, 2036819513, 1899315250, 809044269, 1680896045, 1214263402, 2003922795, 2020608367, 942485555, 959997235};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(17511680, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test132() {
		int driverSelection = 0;
		int op = 3;
		int input = -2113336517;

		int[] arrStack = {1734752057, 1899511858, 876087597, 1680896106, 1566994779, 1668246572, 543845984, 1988125289, 1731803184, 1726886701, 1862303753, 188444005, 1931504481, 1852074594, 1987667814, 926511416, 1077031993, 153969712, 1882009952, 811938662, 943273728, 74068082, 946354534, 1969382263, 1785032555, 1886875254, 1651139428, 1903648009, 1870097272, 1886155053, 2052923499, 1819019619, 1785033079, 1560901467, 242313520, 1563387449, 1702194787, 1870096504, 1886155053, 2052941425, 1534685036, 740323084, 1681484336, 2003383609, 1718120037, 1969452846, 997157495, 1803055217, 1869351268, 2003450214, 862533994, 812202342, 1751672437, 959592294, 71445808, 860502066, 1076719984, 1681024563, 1763377152, 842163508, 929527402, 1694572643};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test133() {
		int driverSelection = 0;
		int op = 0;
		int input = 1868916281;

		int[] arrStack = {7039593, 1969764653, 1534289521, 1533243244, 740317038, 1752594786, 1969699128, 8388608, -16777118, 1768257130, 1663072107, 1902997615, 795097450, 1718968931, -145940369, 1802532721};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			int initialSize = stack.size();
			assertEquals(0, sq.driverStack(stack, op, input));
			assertEquals(1868916281,stack.getElem(stack.getTop()));
			assertEquals(initialSize+1,stack.size());

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test134() {
		int driverSelection = 0;
		int op = 2;
		int input = 1566986331;

		int[] arrStack = {1731803184, 1715024685, 1868260105, 1835823904, 1801547364, 1784837753, 1734752057, 1899511858, 809044269, 1680896045, 828387429, 862337081, 929522281, 1702259299, 545221489, 1836085083, 1681484336, 1916299321, 1718968931, 2003461749, 1650685802, 1701800816, 2003005304, 761543018, 812803685, 1869312119, 1903130669, 1681484336, 1919301479, 1650811753, 1969909611, 2004381807, 1819372397, 1684698985, 811413350, 962950510, 1669625707, 2020633713, 1862886457, 1781530624, 8414824, 1852142947, 1999518575, 1786211192, 1886482284, 157579114, 962999145, 959735918, 1702191991, 2003531885, 1903102317, 1684680809, 963012725, 878867301, 1667921777, 1869314160, 158284132, 862479989, 959592294, 842542384, 862718321, 1868837478, 862533749, 1768122981, 1903648009, 2002455153, 657614132, 996636266, 1701519459, 2003528815, 1902732851, 963129959, 930707045, 1962999817, 1534134883, 842098227, 1769305701, 1784881249, 1734437719};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test135() {
		int driverSelection = 2;
		int op = 2;
		int input = 959592294;

		int[] arrStack = {842491442, 942485555, 963260530, 1714902626, 1701013877, 1785686903, 2020634476, 1902865764, 1786210608, 1563387449, 1702194787, 1870097272, 2020372847, 157563242, 813132085, 962095214, 1702191991, 775647082, 2003531888, 1903127908, 1781557561, 1718121780, 1651074403, 1786212719, 1803055113, 1866032179, 1751545145, 845377274, 64032, 1802267657, 1903125554, 1714645304, 1969841002, 1701934937};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1852730990, 1852730990, 1852755513, 1110667114, 1534554467, 1784505995, 1533243244, 740321902, 1752594786, 1768372536, 812005683, 762272611, 158166131, 543908206, 1684693622, 2036819511, 1803055113, 1866032179, 1751545145};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(1, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test136() {
		int driverSelection = 0;
		int op = 4;
		int input = 1868916281;

		int[] arrStack = {862939739, 2003919725, 543910400, 1969764653, 1784512881, 1533243244, 740321902, 1752594786, 1768365937, 1533243244, 740321902, 1752594786, 1768365880, 811991040, 1062960, 1715024685, 1868260105, 1835823904, 1801547364, 1784837753, 761543018, 812803639, 1734501731, 1769302673, 1802991728, 1869377899, 1835271679, -16425681, 1715039605};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1698613924, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test137() {
		int driverSelection = 0;
		int op = 5;
		int input = 1868916281;

		int[] arrStack = {1784381297, 1868837478, 862009454, 1766158693, 1560901467, 175193138, 1697390698, 1852323686, 1667917162, 813138997, 963012718, 1702191991, 775645797, 1796367223, 690563369};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(-1105803854, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test138() {
		int driverSelection = 1;
		int op = 7;
		int input = 2087020089;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1784348673, 740321902, 1752594786, 1771586102, 812005691, 762272611, 158166131, 543908206, 1681484336, 1920821305, 1718968931, 2003461487, 1802532721, 1870146916, 963268978, 1714900066, 1701013824, 1784638327, 2020634476};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(303704869, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test139() {
		int driverSelection = 2;
		int op = 1;
		int input = 1868916281;

		int[] arrStack = {1412966450, 809044269, 1680896045, 828387429, 862337081, 1768122981, -757935406, -757935406, 1701118263, 1734502757, 1986683680, 2003501156, 1886346084, 962946405, 1694531584, 6673015, 1664233955, 862597234, 6452857, 1734752057, 1899508274, 809044269, 1680896045, 828387429, 862337081};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {7237230, 1852601120, 1801781348, 1784837753, 1730426681};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-855099851, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test140() {
		int driverSelection = 1;
		int op = 1;
		int input = 1870342713;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1731803184, 1327319552, 5993477, 1832058912, -2073989532, 1784837753, 1734752057, 1899511858, 813261417, 1731803184, 1342177279, 1735458816, 2146788975, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1869573999, 1866492277, 1986357859, 157537, 1800929277, -52431, 1429680725, 1359569513, 1702259270, 544697216, 115, 1680042544, 1426523911, 118490887, 119342855, 132712199, 117901063, 117901063, 117960454, 121137721, 1718968866, 2003435520, 33585015, 2004364656, 1867027404, 1802331136, 1052761, 521011712, 1903102317, 1684680809, -167483275, 878864475, 1662728552, 812206900, 1750491946, 963129394, 879259235, 1969452800, 1769585, 1862888804, -2093979392, 73954612, 1651005027, -65536, 573859950, 1668637559, 512, 1903102317, 1684681833, 1752525935, 1902732851, 963129959, 930706021};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			int initialSize = q.size();
			int initialFront = q.getElem(q.getFront());
			assertEquals(initialFront, sq.driverQueue(q, op, input));
			assertEquals(q.size(), initialSize-1);

		} else if (driverSelection == 1) {

			assertEquals(1731803184, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}


		@Test
		public void test141() {
		int driverSelection = 1;
		int op = 5;
		int input = 1903648009;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1734829927, 1734829927, 1734829927, 1731490559, -35486, 1668770417, 1768715040, 1801549156, 1784837760, 1734752057, 1899537458, 809044269, 1680896062, 828387445, 862337123, 544697202, 1837068123, 1681484336, 1916272644, 12336, 808464432, 808478768, 845637479, 1734829927, 1731211312, 808464487, 1728053296, 808463920, 808464432, 808477743, 1714447733, 1784901495, 1803060354, 1905128548, 962735411, 1751545145, 842491416, -416468941, 962750821, 1986683680, 1812554871, 1782146611, 1765356648, 1852124544, -1633771874, -1633771874, -1633771874, -1633771874, -1633771874, -1637259914, 1785699960, 1879654457, 1681090662, 1966682679, 1714567213, 808663352, 842018161, 1885042752, 1853253171, 1765307753, 1666278769, 2002585975, 1527410983, 845493307, 1735813733, 1797284727, 1802268529, 1768305465, 1748133687, 2037802325, 926023777, 1734437719, 1128878406, 859329847, 844443903, -8388508, 2003396147, 1702196842, 2001826656, 1803051376, 2003790080, 1902212362};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test142() {
		int driverSelection = 1;
		int op = 4;
		int input = 1718704995;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {959983718, 959655279, 1533217133, -129, 1835960170, 1651013735, 1714895217, 943731248, 973045860, 1903259953, 1613784497, 1768257130, 1663072107, 1902997615, 1533294954, 812791912, 963016034, 1668770405, 1869312119, 1903130669, 1681458687, -16435320, 1647127853, 757952363, 2004381807, 1819372398, 1684698985, 811413350, 962950510, 24082283, 2020605953, 25657, 1781561193, 892952936, 1852142947, 1999507567, 1786211192, 1885630316, 150994944, 2137404265, 959735918, 1702201998, -1970632054, -1970632054, -1970632093, 2004315000, -1905168631, 2130733616, 1765369448, 1966367337, 1701014135, 1903127416, 1359572793, 1681090662};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1919638997, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test143() {
		int driverSelection = 1;
		int op = 0;
		int input = 1902341408;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1852339833, 1651074873, 942695993, 858614625, 1852074615, 1987667814, 926511416, 2147430457, 157641335, 661349120, 1999463472, 1882027883, 1902997615, 1533294954, 812791912, 963016019, 1668770404, 1903648113, 657614132, 1769954619, 1715037557, 1852010240, 276328556, 1903133440, 12407, 1765095782, 1752065408, 142028347, 1869248363, 2020636271, 1812554871, 1782146611, 1765373032, 1852142947, 2004315000, 1517383433, 1837582848};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			int initialSize = q.size();
			assertEquals(0, sq.driverQueue(q, op, input));
			assertEquals(1902341408,q.getElem(q.size()-1));
			assertEquals(initialSize+1,q.size());

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test144() {
		int driverSelection = 0;
		int op = 8;
		int input = 1868916281;

		int[] arrStack = {16777216, 1668096107, 1785296232, 959277661, 1718704995, 1869360160, 1785620598, 2036492647, 959983718, 959655279, 1533217133, 1819484267, 1634624618, 1651931495, 1714895217};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(15, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}


		@Test
		public void test145() {
		int driverSelection = 1;
		int op = 3;
		int input = 1731817827;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2021213033, -1361872, 1097727, -482988689, 1013131775, 1825558285, 219006927, 1937725281, 1850501680, 943737904, 956837120, 42352, 1868271871, -36296, 1634618472, 963076753, 1786212467, 2070643297, 1887078761, 1685154421, 1701013792, 275734784, 93, 795239481, 963732333, 956956524, -808514291, 226479987, 2136433006, 1282027576, 1077706496, 0, 1765238322, 942495057, 156204151, 1543569259, -2023525889, -8388830, 859308288, -35439, 1786212467, 2070643297, 1887078761, 1685154421, 175204981};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test146() {
		int driverSelection = 2;
		int op = 3;
		int input = 1667457891;

		int[] arrStack = {1560884339, 1818982497, 1886872419, 1665557501};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1668049253, 1986683680, 2003530093, 1886346084, 963260530, 2000234858, 1936269601, 371269921, -65536, 555950369, 555841883, 2019782262, 1651142784, -1892061072, 1886415881, 1902474595, 2004315016, 1836150585, 1681089894, 1667457891, 1668626738, 4207162, 758133541, 941302829, 1903778680, 1668249186, 1784881259, 1685090416, 1885555811, 1665557347, 1667461216, 1886417008, 1886417008, 1886401811, 1886417008, 1443459439, 1681024562, 1765308265, 1667917169, 2002585975, 1527445104, 1886417008, 1886412912, 1797284963, 1264792376, 1434399482, 64052, 1869969010, 1701476135, 1801709313, 88943, 1999975733, 895575905, -933936311, 1363554854, 946431539, 1399157111};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test147() {
		int driverSelection = 1;
		int op = 2;
		int input = 1681484336;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1366061436, 1837132407, 1764777263, 1715013899, 1971025710, 997157522, 1803055211, 1899587675, 1661037932, 16804705, 1852074620, 1784822071, 1736272229, 1983931168, 2003530123, 1885601792, 6959218, 946354534, 1970295148, 1903979904, 1786210608, 1563387449, 157563248, 1534616456, 1986161368, -656877352, -656877352, -664591544, 1230063283, 945108786, 1968270413, 158423396, 844265584, 1903127561, 1685555241, -2062000071};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(-1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}
	
		@Test
		public void test148() {
		int driverSelection = 1;
		int op = 6;
		int input = 2003539566;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2004318062, 1702191991, 779581303, 2004313145, 1781559915, 929981813, 1937190506, 1869966947, 944121446, 1681484336, 1919676013, 1886347108, 929514853, 1668638811, 2036807981, 872376923, 2003919725, 550857321, 1969764684, 960051537, 960051513, 958675257, 956250425, 960051513, 960051513, 959997990, 1717844330, 812789808, 808464432, 808464432, 808464432, 808464432, 808464432, 808479543, 1835365747, 1999530560, 1970168576, 0, 1702191991, 775647099, 1600860274, 1714906978, 1783450957, 1296911693, 1296911717, 1868789623, 1801874801, 1865640038, 1954099712, 301, 808663344, 1919301479, 1651930997, 2002999172, 2003926904, 761543018, 812803639, 1768515945, 536897913, 1717986918, 1717980493, 1296911693, 1291849785, 960051513, 960051513, 607729971, 406403385, 960051513, 960056889, 960051513, 960051513, 960051513, 960051513, 960043833, 960069733, 1970761737, -16774543, 671088639, -9998998, 2130714723};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(1, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test149() {
		int driverSelection = 2;
		int op = 0;
		int input = -1128481604;

		int[] arrStack = {761945439, 2069592373, -345476767};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {-1128481604, -1672129195, 1079334229, 2050505028, 1802141557, 489757063, -1132413764, -1134334688, 729808895, -16777215, 6258011, 1664417796, 886400569, -2077216204, 275405757, 1902341378, 1802134901, 1748577642, 127, 1677729835, 2147418486, 2036820583, 1651191920, 758207792, 1697731925, 1431638017, 5592405, 1431655761, 341132395, 1785296232, 823749213, 1601067875, 1769302065};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(-1473958371, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test150() {
		int driverSelection = 1;
		int op = 2;
		int input = 1448498774;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {1448498774, 1448498774};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test151() {
		int driverSelection = 0;
		int op = 2;
		int input = 1633771873;

		int[] arrStack = {1633771873, 1633771873};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test152() {
		int driverSelection = 0;
		int op = 3;
		int input = 1111638594;

		int[] arrStack = {1111638594, 1111625792, -16904128};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(1, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test153() {
		int driverSelection = 1;
		int op = 3;
		int input = 0;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {2293760, 917329, 16776960, -16777089, -524161};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}

		@Test
		public void test154() {
		int driverSelection = 1;
		int op = 3;
		int input = 0;

		int[] arrStack = {};
		StackQueue sq = new StackQueue();
		StackQueue.Stack stack = sq.new Stack(); 
		for (int i = 0; i < arrStack.length; i++) { 
			stack.push(arrStack[i]);
		}

		int[] arrQ = {};
		StackQueue.Queue q = sq.new Queue(); 
		for (int i = 0; i < arrQ.length; i++) {  
			q.enter(arrQ[i]);
		}

		if (driverSelection == 0) {

			assertEquals(0, sq.driverStack(stack, op, input));

		} else if (driverSelection == 1) {

			assertEquals(0, sq.driverQueue(q, op, input));

		} else {

			assertEquals(0, sq.driverQStack(stack, q, op));
		}
	}
}
