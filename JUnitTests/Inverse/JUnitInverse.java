
import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import java.util.Arrays;


public class JUnitInverse {

	@Test
	public void test() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1651075177, 964257903, 943273849, 960002408, 1768713070, 1802399600, 1969891120, 762670965, 1785555513, 1768961909, 1764768112, 1868840253, 1785621098, 1684759408, 1752068202, 1751741290, 1784832887, 1751739255, 1751740266, 1966696823, 1903524153, 1768646768, 1999724070, 710494069, 1785227115, 1969829945, 2036951147, 1852526154, 691038264, 1751672178, 1999982409, 1684414565, 1919382117, 1246251343, 1952608884, 1346983226, 1347046185, 707356022, 707342381, 1852532846, 1818978664};

		int[] arr2 = {1765373295, 963604528, 758134841, 1026383733, 1768516717, 660875388, 1063871863, 1853255529, 727676770, 1701259615, 1230326351, 1263353407, 1010711599, 1818980208, 1230317609, 643123785, 1330136662, 1380270664, 1381255765, 673850974, 959669881, 926495031, 1966700904, 1785686888, 862152303, 1768582763, 1696607351, 1802462568, 1983473013, 926508320, 1969908590, 539781989, 1785686384, 963994998, 930429301, 1780512368, 1869244515, 1852798821, 1902800697, 1969582198, 812589088, 1785490732, 1819111013, 1869313640, 1868920121, 858929013, 963256431, 846213997, 1663063385, 1431906858, 1497974862, 1751870569, 1799055465, 1885892665, 1869967471, 811281769, 758147440, 1533765995, 1815833456, 1533765979, 761884461, 1885941099, 1852598370, 1768905002, 676931625, 712341864, 1785688109, 807888754, 1952933927, 758122844, 1563450419, 1714445411, 1865425004, 1886730361, 959871336, 1869167406, 1765239156, 2036889098, 1886083952, 1685463146, 1685024365, 1869117029, 1768896633, 946221874, 830039910, 1667394155, 1646289762, 1701800037, 1869178985, 1748382262, 2033344567, 943272503, 808940850, 829778286, 1717792107, 1835227943, 1549627243, 1818062178, 544612423, 1179080311, 1701996133, 1918453579, 1430734933, 943207974, 1579559466, 606085239, 1701213728, 543782196, 845625645, 845835881, 1966106738, 942684266, 539833197, 538976360, 1651861095, 1986293612, 1769171563, 1629495347, 2004248942, 1919430774, 859386912, 543519330, 1986622062, 1747854390, 1618900328, 1702312040, 1731683641, 1731606581, 1702000486};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}

	@Test
	public void test1() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1246382666, 1246382666, 1246382666, 1246382666, 1246382666, 1802399600, 1969891120, 762670965, 1785555513, 1768961909, 1764768094, 1868840253, 1785621098, 1684759408, 1752068202, 1751741290, 1784832887, 1751739255, 1751740266, 1966696742, 710494069, 1785227115, 1969838393, 2036951147, 1282100810, 691038264, 1751672178, 1999982409, 1684414565, 1919382117, 1246243916, 1952608884, 1346983226, 1347046185, 707356022, 707342381, 1852532846, 1818978654, 1765373295, 963604528, 758134841};

		int[] arr2 = {758134841, 963604528, 1765373295, 1818978654, 1852532846, 707342381, 707356022, 1347046185, 1346983226, 1952608884, 1246243916, 1919382117, 1684414565, 1999982409, 1751672178, 691038264, 1282100810, 2036951147, 1969838393, 1785227115, 710494069, 1966696742, 1751740266, 1751739255, 1784832887, 1751741290, 1752068202, 1684759408, 1785621098, 1868840253, 1764768094, 1768961909, 1785555513, 762670965, 1969891120, 1802399600, 1246382666, 1246382666, 1246382666, 1246382666, 1246382666};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}

	
	@Test
	public void test2() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1651075177, 964257903, 943273849, 960002408, 1768713070, 1802399600, 1969891120, 762670965, 1785555513, 1768961909, 1764768112, 1868840253, 1785621098, 1684759408, 1752068202, 1751741290, 1784832887, 1751739255, 1751740266, 1966696823, 1903524153, 1768620032, 16735782, 710494069, 1785227115, 1969829945, 2036951147, 1852526154, 691038264, 1751672178, 1999982409, 1684414565, 1919382117, 1246251343, 1952608884, 1346983226, 1347046185, 707356022, 707342381, 1852532846, 2137745768};

		int[] arr2 = {1765373295, 963604528, 758134841, 1026383733, 1768516717, 660875388, 1063871863, 1852534640, 1230317609, 643123785, 1330136662, 1380270664, 1380600405, 673850974, 959669881, 926495031, 1966700904, 1785664104, 862809453, 1835887981, 1835885414, 1869179502, 1801789484, 2003529573, 1752578405, 1966553445, 544893547, 1847602283, 1701474154, 1882813797, 1983345977, 1969889398, 1886349928, 1668575095, 1869703791, 963994992, -164597909, 426326073, 2036951147, 1852526181, 1966682930};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test3() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1781546333, 760172373, 1227248980, 963930471, 1969383784, 1765370487, 1696623205, 1869965160, 1651056740, 1937140322, 1730240614, 1981834852, 1080452896, 1650878326, 1969579895, 1752577848, 1731813998, 543913846, 1869638201, 1982868788, 909391925, 879047798, 1735406696, 964243577, 1847805220, 892826678, 1735749218, 1702326072, 963987786, 1229478200, 1496339527, 1112887118, 1230456121, 1768451689, 962950756, 1751527481, 1702454840, 812279398, 1782132853, 1718318696, 1868920121, 858929013, 963256431, 846213997, 1663063385, 1431906858, 1497974862, 1751870569, 1799055465, 1885892665, 1869967471, 811281769, 758147440, 1533765995, 1815833456, 1533765979, 761884461, 1885941099, 1852598370, 1768905002, 676931625, 712341864, 1785688109, 807888754, 1952933927, 758122844, 1563450419, 1714445411, 1865425004, 1886730361, 959871336, 1869167406, 1765239156, 2036889098, 1886083952, 1685463146, 1685024365, 1869117029, 1768896633, 946221874, 830039910, 1667394155, 1646289762, 1702000245, 1869050486, 943290656, 1868920183, 1751529573, 2003335526, 941646434, 2004186981, 656897575, 1802663522, 959459368, 1970431336, 1987655781, 2033743464, 791311982, 1651861864, 1702326841, 947284073, 729578597, 1869112687, 1768450408, 909260409, 845166436, 1987208551, 1920099958, 1650939221, 1768648566, 1802071865, 1702324853, 943272503, 808940850, 829778286, 1717792107, 1835227943, 1549627243, 1818062178, 544612423, 1179080311, 1701996133, 1918453579, 1430734933, 943207974, 1579559466, 606085239, 1701803623, 1714976358, 946173031, 1701213728, 543782196, 845625645, 845835881, 1966106738, 942684266, 539833197, 538976360, 1651861095, 1986293612, 1769171563, 1651668066};

		int[] arr2 = {1651668066, 1769171563, 1986293612, 1651861095, 538976360, 539833197, 942684266, 1966106738, 845835881, 845625645, 543782196, 1701213728, 946173031, 1714976358, 1701803623, 606085239, 1579559466, 943207974, 1430734933, 1918453579, 1701996133, 1179080311, 544612423, 1818062178, 1549627243, 1835227943, 1717792107, 829778286, 808940850, 943272503, 1702324853, 1802071865, 1768648566, 1650939221, 1920099958, 1987208551, 845166436, 909260409, 1768450408, 1869112687, 729578597, 947284073, 1702326841, 1651861864, 791311982, 2033743464, 1987655781, 1970431336, 959459368, 1802663522, 656897575, 2004186981, 941646434, 2003335526, 1751529573, 1868920183, 943290656, 1869050486, 1702000245, 1646289762, 1667394155, 830039910, 946221874, 1768896633, 1869117029, 1685024365, 1685463146, 1886083952, 2036889098, 1765239156, 1869167406, 959871336, 1886730361, 1865425004, 1714445411, 1563450419, 758122844, 1952933927, 807888754, 1785688109, 712341864, 676931625, 1768905002, 1852598370, 1885941099, 761884461, 1533765979, 1815833456, 1533765995, 758147440, 811281769, 1869967471, 1885892665, 1799055465, 1751870569, 1497974862, 1431906858, 1663063385, 846213997, 963256431, 858929013, 1868920121, 1718318696, 1782132853, 812279398, 1702454840, 1751527481, 962950756, 1768451689, 1230456121, 1112887118, 1496339527, 1229478200, 963987786, 1702326072, 1735749218, 892826678, 1847805220, 964243577, 1735406696, 879047798, 909391925, 1982868788, 1869638201, 543913846, 1731813998, 1752577848, 1969579895, 1650878326, 1080452896, 1981834852, 1730240614, 1937140322, 1651056740, 1869965160, 1696623205, 1765370487, 1969383784, 963930471, 1227248980, 760172373, 1781546333};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test4() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1430857301, 1413051497, 1735746153, 1751726442, 2003116154, 1701803367, 1751279904, 1685288554, 1650945568, 1802991215, 23738742, 808268854, 1062196, 1697936999, 1882500153, 271589486, 591733813, 929589352, 1751672936, 1751672936, 1751672936, 1751675958, 1735749218, 1701277496, 963987786, 1229478200, 1161390355, 1852389762, 1986291815, 65536, 1714958442, 1717987897, 813000299, 1986555749, 1966682930, 930429290, 544161392, 862806816, 1986359871, 909665638, 1949775929, 1696596070, 1753182312, 1882812277, 1886335067, 761867568, 1768971115, 1768647739, 1802525611, -2007290519, 1865248873, 764046956, 1751279983, 1395075161, 675555957, 2036886127, 1882009639, 1869772662, 1986159737, 1969422336, 1070421, 1433921539, 879063928, 1916823918, 1919446889, 992897335, 1769240936, 1980395627, 1534092416, 6645618, 1919317602, 1733645673, 1802466923, 1953446245, 1981819492, 1869479936, 2147444280, 1986451045, 1952933155, 589505315, 610825829, 1768883176, 946221874, 830039910, 1982544249, 544171381, -2073532872, 1702324345, 1714954338, 1646733174, 661353078, 1647915056, 678785637, 1752594744, 1702443126, 880174960, 879245699, 813264419, 1159988200, 1949722485, 1517707879, 1427073387, 1870012500, 1744922991, 962947434, 1971337564};

		int[] arr2 = {-1406503314, 1651861864, 1702326841, -65536, 729582437, 1869112687, 1768450408, 909260409, 845166423, 1985111383, 1920099958, 1650939221, 1768648566, 1802071865, 1695574645, 943272557, 1646294560, 122046294, 2003137126, 1701992775, 1263880008, 1429746742, 643724905, 1714976358, 946169212, 1981816937, 0, 271397482, 1852405040};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test5() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {906046826, 1696464980, 972319079, 1969383784, 1765370487, 1696623205, 1868851048, -2073428097, 1937140322, 1730240614};

		int[] arr2 = {1981834852, 808460336, 808464432, 1063989296, 808464432, 808460336, 808482678, 1869624374, 876835380, 1711243111};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test6() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1702246448, 1697656170, 1801678112, 1534226024, 1701475897, 761608554, 1746957933, 1847619698, 1701342752, 1983476281, 157954160, 1830837101, 812785782, 1781346349, 959449425, 1987459193, 1751595059, 879061110, 1768844064, 1651930734, 543517286, 1969383541, 1953396069, 1768841760, 1097359989, 1734959733, 1381179494, 1684695138, 544168037, 1684300644, 2049984309, 877152066, 542395733, 1246316885, 743260516, 1667593059, 1717920886, 543455297, 1398297157, 1380271958, 1431915821, 759519046, 1163350597, 1179797078, 1127246384, 158755434, 1852336696, 1919248440, 1651668525, 1798077799, 1748464999, 1748580213, 1330268985, 760568109, 1213079629, 1347373625, 1596550957, 1328378466, 1953655144, 1983411560, 1769303914, 1919498552, 1986146395, 876163945, 875574061, 809315641, 758720607, 673600824, 808793192, 959722789, 892624422, 709512521, 557851428, 909595719, 927875657, 1549551702, 1364673881, 1701869160, 963798377, 1969911341, 1885697394, 1984124505, 1668970354, 1684236898, 1936684913, 1701471021, 1529293938, 1702258037, 1769109351, 1983411513, 1702246456, 858797177, 1752578153, 1731410808, 544307056, 1852142182, 1734964584, 959735864, 862462056, 544630632, 875784551, 1748251497, 1847616032, 878457698, 1985683554, 1819302708, 896693293, 1029861234, 1647851122, 892614197, 171193198, 1919251815, 1748252467, 2037804658, 1651861618, 946348133, 1731753529, 1718712165, 1745515114, 1986476340, 1768387897, 875784807, 875785831, 875772008, 1730163769, 863332148, 859403623, 1715023881, 1748526952, 942945128, 1731409006, 708391017, 812674826, 2104588140, 1650680431, 1664628537, 863254371, 1987184950, 1697461813};

		int[] arr2 = {1765226553, 1496856377, 760957770, 1347762480, 943143273, 1802465385, 809053496, 909653817, 1668769129, 1751345509, 1126188101, 1465276229, 2003324238, 1852468593, 1870095721, 1667904052, 874853432, 1852733289, 1668769056, 1751873397, 1981837175, 1751720035, 947269733, 2004447607, 1701013093, 1998594148, 543518569, 909654307, 943084599, 945370965, 1213086525, 946415957, 1246460778, 1798073390, 1685463151, 1969383534, 1310739531, 1313427831, 1701012085, 1701410671, 1987404645, 2000173397, 1244683088, 1282173290, 1748527481, 1865966967, 962816118, 762916650, 1986945653, 1768449399, 1916352630, 1751722876, 2087022440, 1701800296, 1768437298, 913912416, 929330802, 1701278322, 1719034471, 1431660907, 1380270678, 1163023982, 544631159, 1684170863, 1769298543, 1986750831, 962951018, 1966618930, 925906805, 842102121, 1852203885, 1802330971, 660364655, 1802263917, 1646294560, 1195788118, 2003137126, 1701992775, 1263880008, 1429747766, 643704362, 707010592, 2003136374, 1734752374, 1714972020, 1734698614, 538995061, 875718457, 758278766, 1769287725, 1752315952, 758671904, 758344992, 538994786, 1969645430, 1685023849, 1936354146, 1920229992, 896823860, 1651007776, 540243830, 1986159737, 1969448569, 909661525, 1684172320, 1970234466, 1730180400, 1881172591, 2003856672, 1849176151, 1414018101, 910702959, 1802072155, 1830841961, 1849241719, 543713877, 2000757556, 1702066290, 1080651378, 1748006451, 959717408, 1701995126, 1769107048, 774125152, 1902341997, 1852797296, 1784901489, 1781344585, 1596554869, 1751480120, 1751594853, 963065400, 895840887, 1719035250, 1060517989, 1718105912, 962947193, 1713780022, 1916102007, 1986357607, 926381625, 944194133, 1498107221, 1500935475, 880113255, 947467064, 876177273, 1986160754, 1296979016, 1415137877, 1498292276, 1413830176, 1195920968, 1499948404, 929460839, 946944311, 1198880616, 1731754344, 942288239, 2000235824, 961693014, 1380279101, 1986361142, 959785781, 842031991, 1885694563, 1966682231, 1700551463, 1566322223, 1769564003, 2037728594, 1447384661, 1296641139, 2002987320, 2033727812, 1581474336, 1751474806, 1965061989, 963197032, 540567920, 1647341175, 943224439, 1701984118, 909654327, 2036884000, 1852192889, 943290743, 807946544, 1769109095, 892627058};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}


	@Test
	public void test7() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {223739904, -798281512, 223739904, 1634956383, 1970287411, 858993459, 858993459, 858993505, 1952784416, 538976288, 540680241, 892743731, 926351156, 839542389, 2054841714, 1601202532, 538976254, 538976288, 540680240, 174422117, 1666473828, -2089917152, 706748448, 538976314, 540815370, 1702363136, 1935634533, 845107557, 1663049760, 544498028, 538976288, 538976314, 540084848, 1635018867, 1600872822, 1869768036, 538976288, 540680241, 175137140, 1752391526, 1869966948, 538976288, 538976314, 540019312, 1635018867, 1600744816, 1869771877, 1818848867, 1764556848, 174940536, 1600415088, 1952981040, 538976288, 538976314, 540084835, 1970429808, 1635018784, 538976288, 538976288, 541663280, 175138158, 1684631143, -681156234, -1793056736, 538976314, 540084857, 1701733481, 1852268404, 1870029164, 538976288, 540680241, 540680241, 175530354, 1767989868, 1700753505, 1948262488, 540084851, 1952539241, 1818850408, 1935633249, 1987015269, 1681530935, 825118564, 680553, 1953325424, 1918989160, 538976288, 538976288, 538976314, 540019317, 1852404085, 1700751457, 1852273440, 538976288, 540680240, 174874995, 1952411745, 537272352, 975187978, 1818325876, 1600352865, 1936203808, 538976288, 538982944, 805989473, 1937006440, 1627389984, 538976288, 538976288, 975187978, 1702389091, 1935635305, 1852007775, 1668440435, 1746942496, 876087909, 2026446880, 538982944, 960051513, 960051513, 956981606, 1818190433, 1852728690, 541007904, 538976288, 975200614, 1812619622, 1818195557, 1920166255, 1847599336, -501211104, 975188526, 892494423, 1128335971, 1871605089, 1852071788, 695100704, 538976288, 540680239, 1752131429, 16, 1919312160, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 544368737, 1677721957, 1953199215, 1882148978, 1869050465, 1835426147, 1696612416, 174141281, 1718365490, 775238242, 794912364, 761689466, 2048929129, -415176729, -404232416, 538982944, 805990501, 1852074357, 1948265827, 538976288, 538976288, 543780451, 1764556848, 538976288, 220209210, 540621113, 960051513, 959389743};

		int[] arr2 = {959389743, 960051513, 540621113, 220209210, 538976288, 1764556848, 543780451, 538976288, 538976288, 1948265827, 1852074357, 805990501, 538982944, -404232416, -415176729, 2048929129, 761689466, 794912364, 775238242, 1718365490, 174141281, 1696612416, 1835426147, 1869050465, 1882148978, 1953199215, 1677721957, 544368737, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 538976288, 1919312160, 16, 1752131429, 540680239, 538976288, 695100704, 1852071788, 1871605089, 1128335971, 892494423, 975188526, -501211104, 1847599336, 1920166255, 1818195557, 1812619622, 975200614, 538976288, 541007904, 1852728690, 1818190433, 956981606, 960051513, 960051513, 538982944, 2026446880, 876087909, 1746942496, 1668440435, 1852007775, 1935635305, 1702389091, 975187978, 538976288, 538976288, 1627389984, 1937006440, 805989473, 538982944, 538976288, 1936203808, 1600352865, 1818325876, 975187978, 537272352, 1952411745, 174874995, 540680240, 538976288, 1852273440, 1700751457, 1852404085, 540019317, 538976314, 538976288, 538976288, 1918989160, 1953325424, 680553, 825118564, 1681530935, 1987015269, 1935633249, 1818850408, 1952539241, 540084851, 1948262488, 1700753505, 1767989868, 175530354, 540680241, 540680241, 538976288, 1870029164, 1852268404, 1701733481, 540084857, 538976314, -1793056736, -681156234, 1684631143, 175138158, 541663280, 538976288, 538976288, 1635018784, 1970429808, 540084835, 538976314, 538976288, 1952981040, 1600415088, 174940536, 1764556848, 1818848867, 1869771877, 1600744816, 1635018867, 540019312, 538976314, 538976288, 1869966948, 1752391526, 175137140, 540680241, 538976288, 1869768036, 1600872822, 1635018867, 540084848, 538976314, 538976288, 544498028, 1663049760, 845107557, 1935634533, 1702363136, 540815370, 538976314, 706748448, -2089917152, 1666473828, 174422117, 540680240, 538976288, 538976254, 1601202532, 2054841714, 839542389, 926351156, 892743731, 540680241, 538976288, 1952784416, 858993505, 858993459, 858993459, 1970287411, 1634956383, 223739904, -798281512, 223739904};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}


	@Test
	public void test8() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {858993408, 9408349, 812283237, 1981836901, 1646288416, 1870025215, -8388490, 808478000, 764114537, 1919838254, 607543338, 707400746, 707406378, 707406378, 707403562, 707406378, 707406378, 707406438, 947468345, 2037186578, 1227909490, 1979711588, -2141030912, 270549866, 1719427688, 1970564863, -32904, 1095981138, 1699890531, -1857915910, 64104, 945975912, 875784558, 543301684, 1546869622, 1528853549, 1029861262, -33488896, -1886417009, -1888851936, 1983458616, 909659978, 962554229, 1862365769, 1415333974, 1364411737, 1701869160, 762471785, 1969890340, 606348324, 606348324, 606348324, 2133074980, 606348324, 606348324, 606347296, 778568054, 762340725, 1928160119};

		int[] arr2 = {1646292855, 1902471779, 760948524, 1702193522, 1983408487, 859540768, 1903652974, 1601332839, 538976360, -2140872994, -567463879, 1380275764, 862544741, 1935894117, 1685463167, 2017547096, 1382371904, 1748251497, 1847616032, 100, 1985683572, 759004271, -1912602112, 9408399, -1886434048, 9408399, -1888996297, 863598190, 1919055208, -717723616, 1701263571, 963015031, 1701341045, 959724349, 946415957, 1246460778, 1798250548, 959673703, 875772789, 1985818730, 1969583648, 1852129078, 947204913, 1970694001, 960513913, 1751278592, 2259256, 761805311, 2137930085, 1080178736, 858810233, -1351206809, 1715024015, -1895825265, -1886417009, 1748252467, 2033809006, 1919055210, 1920952352};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test9() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1983347000, 1179604281, 1196845686, 1769105526, 1769093479, 1983330634, 1430798953, 1970239848, 1866033512, 1970879339, 1752054639, 1752526640, 1533619504, 1886153290, 1330981231, 1763735147, 1735747943, 1718905205, 2033741641, 1431262537, 695171431, 1751281204, 1718579301, 1966682215, 1987393337, 812283254, 544225650, 1702192953, 892630329, 1748594544, 707274280, 909520953, 941635943, 1836458091, 1717726752, 1768569205, 544174198, 963014251, 1814962286, 1818847856, 1869247792, 1885041208, 808269930, 1752118580, 1751726384, 896087088, 1768453234, 1752331371, 1869247082, 1953651567, 1751868020, 1852336756, 1919561840, 896101224, 758450786, 1563178351, 1751789680, 762672182, 1965910632, 1785685817, 1785608564, 1969762357, 879242587, 1767196488, 1431455065, 1194867539, 1094997579, 1798648936, 892616038, 1646294898, 1818588537, 1751267698, 2036690807, 963340396, 1852389431, 909718582, 2036692326, 1646291558, 1748251497, 1734767970, 1869111916, 1779001449, 1751738489, 1987208553, 964257910, 963598146, 1196771925, 1314136135, 1177760871, 2033464117, 2034331953, 892613736, 1781872232, 1798583656, 2033792373, 1751804520, 1533177120, 1852401512, 1635217258, 1919382908, 926496613};

		int[] arr2 = {1650815530, 958424677, 863135283, 880030516, 892612921, 873083702, 724972851, 842035815, 1919231343, 1782146674, 1882924912, 1865823288, 909470058, 1752775017, 1965566502, 710502508, 1869160546, 1731743572, 1949857126, 543319666, 1646293605, 1651012661, 1752512053, 959722806, 825505333, 1970891883, 1966553144, 1765292855, 170801204, 942618932, 825782887, 1916364905, 1986490233, 842216504, 1731672116, 959935593, 1731818804, 1882941300, 1966356531, 959920185, 1953837881, 879650662, 543563879, 1713398883, 1818784111, 2003334754, 1734045741, 1213809478, 1498699064, 1969908843, 1769564202, 676611925, 1449290604, 1647059053, 1802266984, 1751279979, 996683376, 1751671399, 963211381, 959854447, 930035255, 1869378937, 925906809, 963598634, 673797414, 873097307, 1262635348, 1380472120, 1196380743, 1280725582, 1265527138, 1970419828, 1748464949, 879327592, 1802398314, 1780896884, 1735092840, 1768912184, 925906230, 610152493, 959258929, 1613902644, 591733813, 1651008098, 1986620002, 1768579641, 1769238626, 997007471, 1785409647, 1731621944, 1819227703, 1869378671, 1919513968, 808727913, 942683187, 2030725492, 912812613, 1163479630, 1112493146, 1129726752, 1197033046, 1497647445, 860374342, 1498370097, 1735747430, 1769303909, 2033739576, 876166445, 543585899, 996567663, 1650814834, 1885497973, 544895844, 1097360489, 1869112889, 1769545831, 1946826293, 1027172712, 808875375, 1786010472, 909457769, 1970878773, 947218286, 1802072692, 1786067316, 1969763640, 876116315, 895313973, 1030234233, 1970107769, 745108780, 660343389, 992767340, 996827759, 1953524328, 1651537002, 1647257452, 1920228203, 1764783209, 1780906343, 892958018, 1263290937, 1230132309, 1195915599, 1163020359, 1227896120, 811152437, 2037657656, 892627047, 1852388660, 2033806445, 992764519, 1802466410, 1785753448, 1765356852, 1969764731, 1785686645, 1920296761, 813003321, 813003622, 1685741925, 2003972961, 1899324517, 1953850998, 1734947379, 1920098922};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}


	@Test
	public void test10() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 =  {257294336, 1611299284, 257294336, 1634956383, 1970300001, 1952784416, 538976288, 540680241, 892743731, 926364722, 906651253, 2054841714, 1601202532, 538976288, 538976288, 975188785, 875771658, 1668899692, 1702059876, 1869505824, 538976288, 538982944, 805987704, 1701016415, 1685024357, 538976288, 538976288, 975189040, 174422117, 1668505456, 1701994355, 1700995104, 538976314, 540618292, 839544929, 1953002335, 1953461345, 1814044704, 538976288, 975188234, 1885434984, 1935631969, 1987015269, 1679826976, 538982944, 822767713, 1935632749, 1886351988, 1701060640, 538982944, 805989729, 2019517541, 1886677024, 538976288, 538976288, 975188234, 1668641375, 1885434984, 538976288, 538976288, 538982944, 805990501, 1852074350, 1734305377, 1987256352, 538968352, 975188234, 1885695588, 1768843103, 1953461345, 1814044704, 538982944, 822769249, 1919508834, 1818582896, 1635018867, 538976288, 975188234, 1937006946, 1768712564, 2032148512, 538976288, 538982944, 925969972, 858065506, 1769237857, 1885299574, 1730158624, 538976288, 540680240, 774910245, 175468137, 1903519071, 1668440435, 1751479072, 538976314, 540019317, 1852404085, 1700751457, 1852273440, 538976288, 540680240, 174874995, 1952411745, 1952981024, 538976288, 538976314, 540019308, 1634956383, 1668440435, 1746935840, 538976288, 540680240, 174874995, 1952409697, 1852252192, 538976288, 538976314, 540019301, 2019910515, 1601399150, 1667587939, 1918989160, 540680244, 805987704, 1701011316, 1768777071, 1970544672, 538976288, 975190329, 960051513, 960051466, 1634102367, 1650552430, 1701978144, 538976288};

		int[] arr2 =  {538976288, 1701978144, 1650552430, 1634102367, 960051466, 960051513, 975190329, 538976288, 1970544672, 1768777071, 1701011316, 805987704, 540680244, 1918989160, 1667587939, 1601399150, 2019910515, 540019301, 538976314, 538976288, 1852252192, 1952409697, 174874995, 540680240, 538976288, 1746935840, 1668440435, 1634956383, 540019308, 538976314, 538976288, 1952981024, 1952411745, 174874995, 540680240, 538976288, 1852273440, 1700751457, 1852404085, 540019317, 538976314, 1751479072, 1668440435, 1903519071, 175468137, 774910245, 540680240, 538976288, 1730158624, 1885299574, 1769237857, 858065506, 925969972, 538982944, 538976288, 2032148512, 1768712564, 1937006946, 975188234, 538976288, 1635018867, 1818582896, 1919508834, 822769249, 538982944, 1814044704, 1953461345, 1768843103, 1885695588, 975188234, 538968352, 1987256352, 1734305377, 1852074350, 805990501, 538982944, 538976288, 538976288, 1885434984, 1668641375, 975188234, 538976288, 538976288, 1886677024, 2019517541, 805989729, 538982944, 1701060640, 1886351988, 1935632749, 822767713, 538982944, 1679826976, 1987015269, 1935631969, 1885434984, 975188234, 538976288, 1814044704, 1953461345, 1953002335, 839544929, 540618292, 538976314, 1700995104, 1701994355, 1668505456, 174422117, 975189040, 538976288, 538976288, 1685024357, 1701016415, 805987704, 538982944, 538976288, 1869505824, 1702059876, 1668899692, 875771658, 975188785, 538976288, 538976288, 1601202532, 2054841714, 906651253, 926364722, 892743731, 540680241, 538976288, 1952784416, 1970300001, 1634956383, 257294336, 1611299284, 257294336};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test11() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {758590765, 757935405, 757935405, 757935405, 757935405};
		int[] arr2 = {757935405, 757935405, 757935405, 757935405, 757935405};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test12() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {594568553, 808727401, 963194925, 947203432, 1799038325, 1751594869, 2036887657, 742288995, 1768453737, 909653048, 889858865, 875247157, 1784896306, 875786086, 1735798836, 862547488, 1701390624, 1919433011, 2037789813, 1614361458, 1983459361, 1616934176, 1986686247, 542847856, 879370331, 892616038, 1646294898, 1818588537, 1751267698, 2036690807, 963340396, 1852389431, 909718582, 2036692326, 1646291558, 1748251497, 1734767970, 1869111916, 1779001449, 1751738489, 1987208553, 964257910, 963598146, 1197827688, 1920350008, 1920559215, 1768976981, 1247104596, 543519353, 1667659111, 1768241015, 1949853283, 1650748223, 1014326134, 929526840, 1715041637, 1736013344, 1835755877, 1919579961, 1986616178, 1702260768, 1835820390, 542861938, 812463155, 897139057, 825570356, 1751790902, 1751856181, 1752774965, 1969777258, 1750802550, 1701996064, 1919245088, 812217711, 1886545250, 1830841961, 1734893943, 1869247094, 1651668587, 1768580709, 963190890, 1968924018, 1735750262, 1852470642, 1701344885, 930244975, 2083993911, 1700947314, 708386918, 1697870438, 859061364, 859059508, 825832458, 859188022, 892543094, 1768452654, 610613366, 2033793138, 1969565808, 1981837170, 1849382725, 1095910756, 1785225760, 745221742, 1818904649, 1248687973, 1684235622, 1819242088, 1768913256, 946825324, 997027435, 1869244521, 1886020978, 1869625717, 1986148409, 1919039349, 1983476328, 1701867040, 1987340647, 963982448, 996635765, 876098361, 926431604, 1966291252, 1852270112, 1713399654, 543449964, 1752264567, 1750750070, 1650940784, 759716163, 1180259413, 947219052, 1802074472, 707286087, 1431724651, 1818373152, 1835756649, 1751671401, 1799055406, 1885890658, 1731815792, 1966683703, 1865903926, 930049141, 2033659959, 2033807193, 707275093, 640944744, 1531658825, 1414690413, 543581544, 1981834040, 1769563496, 807430773, 1768257896, 1664694373, 2004432995, 1869112165, 1869182832, 962819676, 761555803, 1702196793, 812803384, 1547648889, 1735942967, 2036676980, 1965898101, 1986211173, 1920415861, 1615353144, 1196380743, 1280725582, 1784833123, 1969711461, 1970758502, 930441591, 1701734754, 1970419828, 1748464949, 879327592, 1802398314, 1780896884};

		int[] arr2 = {1780896884, 1802398314, 879327592, 1748464949, 1970419828, 1701734754, 930441591, 1970758502, 1969711461, 1784833123, 1280725582, 1196380743, 1615353144, 1920415861, 1986211173, 1965898101, 2036676980, 1735942967, 1547648889, 812803384, 1702196793, 761555803, 962819676, 1869182832, 1869112165, 2004432995, 1664694373, 1768257896, 807430773, 1769563496, 1981834040, 543581544, 1414690413, 1531658825, 640944744, 707275093, 2033807193, 2033659959, 930049141, 1865903926, 1966683703, 1731815792, 1885890658, 1799055406, 1751671401, 1835756649, 1818373152, 1431724651, 707286087, 1802074472, 947219052, 1180259413, 759716163, 1650940784, 1750750070, 1752264567, 543449964, 1713399654, 1852270112, 1966291252, 926431604, 876098361, 996635765, 963982448, 1987340647, 1701867040, 1983476328, 1919039349, 1986148409, 1869625717, 1886020978, 1869244521, 997027435, 946825324, 1768913256, 1819242088, 1684235622, 1248687973, 1818904649, 745221742, 1785225760, 1095910756, 1849382725, 1981837170, 1969565808, 2033793138, 610613366, 1768452654, 892543094, 859188022, 825832458, 859059508, 859061364, 1697870438, 708386918, 1700947314, 2083993911, 930244975, 1701344885, 1852470642, 1735750262, 1968924018, 963190890, 1768580709, 1651668587, 1869247094, 1734893943, 1830841961, 1886545250, 812217711, 1919245088, 1701996064, 1750802550, 1969777258, 1752774965, 1751856181, 1751790902, 825570356, 897139057, 812463155, 542861938, 1835820390, 1702260768, 1986616178, 1919579961, 1835755877, 1736013344, 1715041637, 929526840, 1014326134, 1650748223, 1949853283, 1768241015, 1667659111, 543519353, 1247104596, 1768976981, 1920559215, 1920350008, 1197827688, 963598146, 964257910, 1987208553, 1751738489, 1779001449, 1869111916, 1734767970, 1748251497, 1646291558, 2036692326, 909718582, 1852389431, 963340396, 2036690807, 1751267698, 1818588537, 1646294898, 892616038, 879370331, 542847856, 1986686247, 1616934176, 1983459361, 1614361458, 2037789813, 1919433011, 1701390624, 862547488, 1735798836, 875786086, 1784896306, 875247157, 889858865, 909653048, 1768453737, 742288995, 2036887657, 1751594869, 1799038325, 947203432, 963194925, 808727401, 594568553};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}



	@Test
	public void test13() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1764766771, 1765370160, 758674733, 1751857957, 1969776439, 808458025, 808464432, 1282304118, 1765881908, 943000107, 825764662, 896164699, 842281839, 1718056496, 875784558, 543517046, 1785538336, 1530097716, 1780517429, 708666978, 544698988, 1702197608, 1647932025, 1701803833, 1802005614, 1765291830, 959723129, 1702192738, 543843944, 875784551, 1718968943, 1751283306, 157837672, 1769894262, 1919248697, 2036889145, 1867989575, 1701210130, 1983328370, 2036887401, 1886541130, 1430803605, 1701999975, 1768241015, 1949709878, 909522486, 909522488, 1717789284, 1799306357, 1668691815, 1949853241, 1969579897, 1981836651, 1768256106, 2000254569, 1534223734, 1882273076, 879258159, 912812852, 896039225, 896878698, 1785223968, 1986359910, 544367963, 2003398524, 553582592, 1778385250, 1920100719, 2083993911, 1700952434, 708405625, 1751267641, 1764765016, 1965910123, 543581491, 1919300404, 1014256180, 893333817, 873083702, 724972851, 712403313, 1915626623, 947288354, 947025253, 812676640, 1868983867, 1464156498, 1164208744, 1646275691, 778988650, 1211517549, 2003133543, 942813962, 908947305, 1786132594, 1702246773, 2036691555, 1701211247, 1852336495, 2036876143, 1852534634, 1751740522, 1701998448, 963999330, 943288930, 926639988, 1971322983, 1713398874, 1684566383, 2003320832, 1986160475, 1882015833, 1128683860, 1429763434, 1818978681, 1747591168, 26722, 1802265117, 544041836, 1768444002, 1584085864, 779118696, 1650932073, 959854447, -8440304, 1869378937, 925906809, 963598634, 673797414, 873097307, 1262635321, 2036889145, 1867989575, 1701210130, 1983326322, 2036885622, 537933988, 2036688995, 1985752420, 1800764789, 1987453027, 946434917, 1748041321, 1969841529, 1751333176, 1702328632, 1668636744, 1429741670, 1196380672, 22434382, 1784833123, 1969711461, 1970758502, 930441481, 151610377, 151587081, 151587110, 151615333, 1315529333, 1916302440, 930428212, 2071554155, 1854696042, 643069031, 1802135657, 1869953079, 538992759, 1685088288, 1983461477, 1970679865, 544565871, 538993970, 1731687526, 858928732, 929458031, 1651273779, 2117232185, 1768449636, 942814016, 812016487, 942813962, 908947305, 1786132594};

		int[] arr2 = {1702246773, 2036691574, 1802465840, -9018823, 1962960984, 1852186729, 1752333881, 1870215168, 16521, 1851467572, 1966700143, 1529164848, 2100557360, 875705199, 808279406, 1764042021, 623191333, 624243801, 963407163, 744645632, 745825654, 1667589943, 1769236345, 1969711458, 1780509297, 1651998720, 13363, 1768384121, 2003374116, 931226744};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}




	@Test
	public void test14() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {421075225, 421075225, 421075225, 421075225, 421075225, 421075225, 423113994, 738132523, 909470272, 3290182, 1868785526, 808722025, 1178169186, 1114336288, 746614188, 1818847336, 1919972665, 1396141879, 623191413, 1365385320, 2037805669, 1765374220, 3764055, 1111972710, 1752331831};

		int[] arr2 = {628259176, 2020175986, 1768515945, 1768515945, 1768501861, 1983477113, 1702000179, 875903081, 2036688944, 543847785, 1702455395, 959997303, 2100847471, 1751344495, 1769435193, 1668701229, 1684757349, 1970682160, 1919236188, 1061124455, 2019768185, 1698264181, 758740342, 1663919474, 2000188768};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}
}
